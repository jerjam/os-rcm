/* START LIBRARY DESCRIPTION *********************************************
DESCRIPTION:
This library provides an external data/address system for the strobe pin PE0,
IB0CR 0x0000–0x1FFF
END DESCRIPTION **********************************************************/

/*** BeginHeader */
#ifndef __DEV_ExtIO_LIB
#define __DEV_ExtIO_LIB
/*** EndHeader */


/*** BeginHeader
ExtIO_Init
*/
#define PORTA_AUX_IO          // required to enable external I/O bus

//_____________________________<FUNCTIONS>______________________________________
int ExtIO_Init(int w8StNum, int hanshake_pin_conf);
//_____________________________</FUNCTIONS>______________________________________
/*** EndHeader */

/* Driving port E procedures
WrPortI(PEDDR, &PEDDRShadow,  0x00);
WrPortI(PEDCR, &PEDCRShadow,  0x00);
WrPortI(PEFR, &PEFRShadow,  0x00);
*/

//_________________________________<CONFIGLOCAL>________________________________
//_________________________________</CONFIGLOCAL>_______________________________
/* START FUNCTION DESCRIPTION ********************************************
DEV_ExtIO<.LIB>
SYNTAX: int ExtIO_Init(int w8StNum, int hanshake_pin_conf)
DESCRIPTION:   Initializes the external bus but only for bank 0
PARAMETER:  (int w8StNum, int hanshake_pin_conf)
RETURN VALUE:  1
END DESCRIPTION **********************************************************/

int ExtIO_Init(int w8StNum, int handshake_conf)
{
int config;

switch (w8StNum)
{
  case 1:
  	config=0xC0;
  break;
  case 3:
  	config=0x80;
  break;
  case 7:
  	config=0x40;
  break;
  case 15:
  	config=0x00;
  break;
  default:
  	return -1;
}
// initialize PE0 as an I/O strobe
WrPortI(PEFR, 	&PEFRShadow,   (PEFRShadow  | 0x01) );

// set PE0 to be an output
WrPortI(PEDDR, &PEDDRShadow, 	(PEDDRShadow | 0x01) );

// set PE0  = 1 wait state, I/O Strobe, writes are enabled
WrPortI(IB0CR, &IB0CRShadow, 	(0x38 | config)  );  //F8 - one cicle

//Two lines below do the same as #define PORTA_AUX_IO
WrPortI(IB5CR, &IB5CRShadow, 	0x68);
WrPortI(SPCR,  &SPCRShadow,  	0x8C);    //External I/O data bus (write 0x08C to SPCR)

//<HANDSHAKE>
/*
handshake_conf- first byte = pin number
4th bit - low/high level sensivity
*/
if (handshake_conf>0)
{
WrPortI(IHCR, &IHCRShadow, handshake_conf);
BitWrPortI(IHSR, &IHSRShadow, 1, 0);
WrPortI(IHTR, NULL, 0x3F); //3F cycles wait
}
//</HANDSHAKE>

return 1;
}

/*
root void ExtIO_Write(int address, char byte)
{
WrPortE(address, NULL, byte);
}

root int ExtIO_Read(int address)
{
return RdPortE(address);
}
*/

/*** BeginHeader */
#endif
/*** EndHeader */