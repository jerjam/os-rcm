/*************************************************************************
	Samples\SPI\spi_test.c

	ZWorld, 2001

	test out SPI driver with an NS ADC0831 chip. Uses serial channel B for
	the SPI data.

	PB7 acts as the CS line on the ADC
	PB0 is the serial B clock line(SCLK)

	PC4 is the data output(MOSI)
	PC5 is the data input(MISO)

	Reads two bytes worth with each chip select.
	The first two bits are not part of the data. They are always 1 and
	then 0 .  This is followed by 8 bits of data for the sample, and
	then 6 extra bits.

************************************************************************/

/*** BeginHeader */
#ifndef __DEV_SPIB_BODY_LIB
#define __DEV_SPIB_BODY_LIB
/*** EndHeader */

//_____________________________<LIBRARIES>______________________________________
/*** BeginHeader */
#ifndef ___AUTO
	#define ___AUTO
	#class auto
#endif

#ifndef ___SPIB
	#define ___SPIB
	#define SPI_SER_B
	#define SPI_CLK_DIVISOR 8            //8 for Port expanders
   #define SPI_MASTER
	#define SPI_RX_PORT SPI_RX_PC
   #define CSB_NO 7
#endif

#ifndef ___SPI_LIB
	#define ___SPI_LIB
	#use "spi.lib"
#endif

#use "DEV_SPIB_HEADER.LIB"
/*** EndHeader */
//_____________________________</LIBRARIES>_____________________________________


/*** BeginHeader
SPIB_Init,SPIB_Write,SPIB_Read
*/

//_____________________________<FUNCTIONS>______________________________________
int SPIB_Init(int polarity);
int SPIB_Write(char *buf, int len);
int SPIB_Read(char *buf, int len);
//_____________________________</FUNCTIONS>______________________________________
/*** EndHeader */

//<LOC_DEFINES>
//#define LOC_Eth_Ping_Timeout 0xffffffffL
//#define LOC_Eth_Det_Delay_Time 2000
//</LOC_DEFINES>

/*
	PB7 acts as the CS line on the ADC
	PB0 is the serial B clock line(SCLK)

	PC4 is the data output(MOSI)
	PC5 is the data input(MISO)
*/
_SPIB_NODEBUG
int SPIB_Init(int polarity)
{
//<CS config>
	BitWrPortI(PBDDR, &PBDDRShadow, 1, CSB_NO); //CS
	// Set all of the outputs high.   ~low
	BitWrPortI(PBDR,  	&PBDRShadow,  1, CSB_NO); //CS
//</CS config>

//SPIxor=0xFF;     //inverts received data
// Initialize PC4 (SPI TX) to output
	BitWrPortI(PCDDR, &PCDDRShadow, 1, 4);
// Initialize PC4 to use alternate function
	BitWrPortI(PCFR, &PCFRShadow, 1, 4);

#ifndef ___SPIinit
	#define ___SPIinit
	SPIinit();
#endif

//<SCLK polarity>
//10 inverted //00 normal
   BitWrPortI(SBER, &SBERShadow, 0, 5);             //shold be 0
	BitWrPortI(SBER, &SBERShadow, polarity, 4);
//</SCLK polarity>

//<PORTS OCCUPATED>
   PORTC_PINS_TAKEN[4]='1'; 		//MOSI/TXB
   PORTC_PINS_TAKEN[5]='1';      //MISO/RXB
   PORTB_PINS_TAKEN[0]='1';      //SCLK
   PORTB_PINS_TAKEN[CSB_NO]='1'; //CS
//</PORTS OCCUPATED>

return 1;
}

_SPIB_NODEBUG
int SPIB_Write(char *buf, int len)
{
int CS_Flag;
BitWrPortI(PBDR,&PBDRShadow,0,CSB_NO);
CS_Flag=SPIWrite(buf,len);
BitWrPortI(PBDR,&PBDRShadow,1,CSB_NO);
return CS_Flag;
}

_SPIB_NODEBUG
int SPIB_Read(char *buf, int len)
{
int CS_Flag;
BitWrPortI(PBDR,&PBDRShadow,0,CSB_NO);
CS_Flag=SPIRead(buf, len);
BitWrPortI(PBDR,&PBDRShadow,1,CSB_NO);
return CS_Flag;
}

/*** BeginHeader */
#endif
/*** EndHeader */