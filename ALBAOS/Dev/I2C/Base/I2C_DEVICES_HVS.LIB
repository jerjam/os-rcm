/*** BeginHeader */
#ifndef __I2C_DEVICES_HVS_LIB
#define __I2C_DEVICES_HVS_LIB
#endif
/*** EndHeader */

/* START LIBRARY DESCRIPTION *********************************************
I2C_DEVICES.LIB

Rabbit Semiconductor, 2001

This library contains higher level functions for specific I2C devices

The library currently has routines for

serial EEPROM devices:
	I2CWrite
	I2CRead
	L24C08_put
	XL24C08_get
	WriteEEPROM
	ReadEEPROM

I2C DAC chips(MAX517/518/519):
	I2CSetDAC


	 Acknowledgement:
				 	This library contains code written for Rabbit Semiconductor
				 	 	by
               KENT JOHANSEN
               ANAKRON / ANAKRON CANADA INC
               www.anakron.com
               kent@anakron.com


END DESCRIPTION *********************************************************/

/*** BeginHeader */

#use "I2C_HVS.LIB"

/*** EndHeader */

/*** BeginHeader I2CWrite */
nodebug
int I2CWrite(unsigned char slave,
				 unsigned char index,
				 char *buf,
				 unsigned char len);
/*** EndHeader */


/* START FUNCTION DESCRIPTION ********************************************
I2CWrite            <I2C.LIB>
SYNTAX: int I2CWrite(unsigned char slave,
							unsigned char index,
							char *buf,
							unsigned char len);

DESCRIPTION: Uses the EEPROM scheme to write data to slave
          	 Sends START, slave address, index and then data, STOP
             Generic interface that may be used to communicate with another
				 processor
             Waits for slave to respond. EEPROM does not respond while
             internal write takes place.

PARAMETER1: unsigned char slave - slave address
PARAMETER2: unsigned char index - index in in EEPROM to write to
PARAMETER3: char *buf        - buffer with data
PARAMETER4: unsigned char len  - lengt of data to send

RETURN VALUE: 0 or error code (see code)
END DESCRIPTION **********************************************************/

nodebug  int I2CWrite(unsigned char slave,
				  		   unsigned char index,
				 			char *buf,
				 			unsigned char len)
{
	auto unsigned char cnt;
	auto short int err;

	if (err=i2c_startw_tx())
	{
		i2c_stop_tx();
		return -10+err; // Return too long stretching
	}
	if (err=i2c_wr_wait(slave))
	{
		i2c_stop_tx();
		return -20+err; // Return no ack on slave (retried)
	}
	if (err=i2c_write_char(index))
	{
		i2c_stop_tx();
		return -30+err; // Return no ack on index
	}
	for (cnt=0;cnt<len;cnt++)
	{
		i2c_write_char(buf[cnt]);
   }
   i2c_stop_tx();

	return 0;
}

/*** BeginHeader I2CRead */
nodebug
int I2CRead(unsigned char slave,
				unsigned char index,
				char *buf,
				unsigned char len);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
I2CRead            <I2C.LIB>
SYNTAX: int I2CRead(unsigned char slave,
						  unsigned char index,
						  char *buf,
						  unsigned char len);

DESCRIPTION: Uses the EEPROM scheme to read data from slave
             Sends  START, slave address, index START,
             slave address +1,
             reads data (sending ACKs and NAK on last data) STOP
             Generic interface that may be used to communicate with another
				 processor
             Waits for slave to respond. EEPROM does not respond while
             internal write takes place.

PARAMETER1: unsigned char slave - slave address
PARAMETER2: unsigned char index - index in in EEPROM to read from
PARAMETER3: char *buf          - buffer for data
PARAMETER4: unsigned char len   - size of data buffer

RETURN VALUE: 0 or error code (see code)
END DESCRIPTION **********************************************************/

nodebug  int I2CRead(unsigned char slave,
					     unsigned char index,
			   	 	  char *buf,
			   		  unsigned char len)
{
	auto unsigned char cnt;
	auto short int err;

	if (err=i2c_startw_tx())
	{
		i2c_stop_tx();
		return -10+err; // Return too long stretching
	}
	if (err=i2c_wr_wait(slave))
	{
		i2c_stop_tx();
		return -20+err; // Return no ack on slave
	}
	if (err=i2c_write_char(index))
	{
		i2c_stop_tx();
		return -30+err; // Return no ack on index
	}
	//i2c_Delay(10);
	if (err=i2c_startw_tx())
	{
		i2c_stop_tx();
		return -40+err; // Return too long stretch on read
	}
	if (err=i2c_wr_wait(slave+1))
	{
		i2c_stop_tx();
		return -50+err; // Send read to slave - no ack (retried) return -5
	}
	for (cnt=0;cnt<len;cnt++)
	{
		err=i2c_read_char(&buf[cnt]);
		if (err)
		{
			i2c_stop_tx();
			return -60+err;
		}
		if (cnt==(len-1))
		{
			i2c_send_nak();
		}
		else
      {
			i2c_send_ack();
		}
	}
	i2c_stop_tx();

	return 0;
}


