/*** BeginHeader */
#ifndef __ALBAOS_LIBRARIES_LIB
#define __ALBAOS_LIBRARIES_LIB
/*** EndHeader */

/*** BeginHeader
SYS_DelayMs,
SYS_DelayUs,
SYS_HexLenDetect,
SYS_Abs_UL,
SYS_Str_isAllHex,
SYS_Detect_CharPos,
SYS_Array_HardClear,
SYS_Array_SoftClear,
SYS_HexStr2Dex,
SYS_IntPow,
SYS_Timestamp,
SYS_Serialize_Int32,
SYS_2DimTo1Dim,
SYS_Strlen,
SYS_StrlenChars,
SYS_Bit_Cpy,
SYS_Bit_Cmp,
SYS_Int32ToStr,
SYS_Float2Prefix,
SYS_Round_Float2Int16,
SYS_Float2EngStr,
*/

void SYS_Array_HardClear(char * array, int max);
void SYS_Array_SoftClear(char * array, int max);

void SYS_DelayMs(int iDelay);
void SYS_DelayUs(int iDelay);
int SYS_HexLenDetect(char * tab);
unsigned long SYS_Abs_UL(unsigned long var);
int SYS_Str_isAllHex(char *hex_str);
int SYS_Detect_CharPos(char *str, char character);
//int SYS_Init_intConst(int * constant,int value);
int SYS_HexStr2Dec(char *hexStr);
unsigned long int SYS_IntPow(int base,int ex);
unsigned long int SYS_Timestamp(int mode);
int SYS_Serialize_Int32(char * buf, unsigned long int int32);
int SYS_2DimTo1Dim(char * one_dim_buf, char ** two_dim_buf, char separator);
int SYS_Strlen(char * str, char terminator);
int SYS_StrlenChars(char * str, char terminator);
int SYS_Bit_Cpy(void *dst,int bit, int pos);
int SYS_Bit_Cmp(void *arg1,void *arg2,int pos);
int SYS_Int32ToStr(char *buf,long int int32);
float SYS_Float2Prefix(float arg, int *div);
int SYS_Round_Float2Int16(float arg);
int SYS_Float2EngStr(char *buf,float arg);

/*** EndHeader */

_ALBAOS_NODEBUG void SYS_DelayMs(int iDelay)
{
	unsigned long ul0;
	ul0 = MS_TIMER;				// get current timer value
	while ( MS_TIMER < ul0 + (unsigned long) iDelay );
}

//it works only for Rabbit 4000 - RCM4200
_ALBAOS_NODEBUG void SYS_DelayUs( int iDelay )
{
	int i;
	iDelay=(int)(iDelay*1.15);
	for ( i=0; i<iDelay; i++ );
}

_ALBAOS_NODEBUG
int SYS_HexLenDetect(char * tab)
{
int i;
int len;
len=strlen(tab);

for(i=0;i<=len;i++)
	if ( (tab[i]<0x30) || (tab[i]>0x39) )
   	if( (tab[i]<0x41) || (tab[i]>0x46)  )
      	return i;

return -1;
}

_ALBAOS_NODEBUG
unsigned long SYS_Abs_UL(unsigned long var)
{
if (var>=0) return var;
else return (-1*var);
}

_ALBAOS_NODEBUG
int SYS_Str_isAllHex(char *hex_str)
{
int i;
int len;
len=strlen(hex_str);

for(i=0;i<len;i++)
	{
	if(hex_str[i]<0x30) return -1;
   else if( (hex_str[i]>0x39) && (hex_str[i]<0x41) ) return -2;
   else if( hex_str[i]> 0x46) return -3;
   }

return 1;
}

_ALBAOS_NODEBUG
int SYS_Detect_CharPos(char *str, char character)
{
int i;
int len;
len=strlen(str);

for(i=0;i<len;i++)
	{
	if (str[i]==character) return i;
   }

return -1;
}

_ALBAOS_NODEBUG
void SYS_Array_HardClear(char * array, int max)
{
int i;

for(i=0;i<max;i++) array[i]=0;
}

_ALBAOS_NODEBUG
void SYS_Array_SoftClear(char * array, int max)
{
int i;
int len;

len=strlen(array);
for(i=0;(i<len) && (i<max);i++) array[i]=0;
}

_ALBAOS_NODEBUG
unsigned long int SYS_IntPow(int base,int ex)
{
int i;
unsigned long int ulong;
ulong=1;
for(i=0;i<ex;i++) ulong*=base;
return ulong;
}

_ALBAOS_NODEBUG
int SYS_HexStr2Dec(char *hexStr)
{
int dec;
int i;
int len;

dec=0;
len=SYS_HexLenDetect(hexStr);

if(len>3) return 0;

for(i=0;i<len;i++)
	{

   switch ( toupper(hexStr[i]) )
   {
     case 'F' :
     dec+=15*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'E' :
     dec+=14*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'D' :
     dec+=13*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'C' :
     dec+=12*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'B' :
     dec+=11*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'A' :
     dec+=10*((int)SYS_IntPow(16,len-1-i));
     break;

     default:
     dec+=(hexStr[i]-48)*((int)SYS_IntPow(16,len-1-i));
   }


   }

return dec;
}


_ALBAOS_NODEBUG
unsigned long int SYS_Timestamp(int mode)
{
static unsigned long int timestamp;

#GLOBAL_INIT{
timestamp=0;
}

switch (mode)
{
  case 1:
  timestamp=MS_TIMER;
  return 0;
  break;

  case 2:
  return SYS_Abs_UL(MS_TIMER-timestamp);
  break;

  case 3:
  printf("\nST==%u[ms]", (int) SYS_Abs_UL(MS_TIMER-timestamp) );
  return 0;
  break;

  default: return -1;
}

return -1;
}

_ALBAOS_NODEBUG
int SYS_Serialize_Int32(char * buf, unsigned long int int32)
{
int i;
int len;

len=sizeof(int32)*8;

for(i=0;i<len;i++)
	if(BIT(&int32,i)==1) buf[i]='1';
   else buf[i]='0';

buf[i]=0;
return i;
}

_ALBAOS_NODEBUG
int SYS_2DimTo1Dim(char * one_dim_buf, char ** two_dim_buf, char separator)
{
int i;
int len;
int char_idx;

char_idx=0;

for(i=0;(len=strlen(&two_dim_buf[i][0]))!=0;i++)
	{
   if(i!=0)
   	{
      one_dim_buf[char_idx]=separator;
      char_idx++;
      }
	strncpy(&one_dim_buf[char_idx],&two_dim_buf[i][0],len);
   char_idx+=len;
   }

one_dim_buf[char_idx]=0;
return char_idx;
}

_ALBAOS_NODEBUG
int SYS_Strlen(char * str, char terminator)
{
int i;
int len;
len=strlen(str);

for(i=0;i<len;i++)
	{
	if (str[i]==terminator)
      {
      return i;
   	}
   }

return len;
}

_ALBAOS_NODEBUG
int SYS_StrlenChars(char * str, char terminator)
{
int i;
int len;
len=strlen(str);

for(i=0;i<len;i++)
	{
	if ( (str[i]==terminator) || (str[i]=='\n') || (str[i]=='\r') )
      {
      return i;
   	}
   }

return len;
}

_ALBAOS_NODEBUG
int SYS_Array_1Dto2D(char *array2D, char *array1D, int collumn_jump)
{
int i,jump;
int len;
int idx;
int len_max;

len_max=strlen(array1D);

for(i=0,idx=0,jump=0;((len=SYS_Strlen(&array1D[idx],','))>0) && (idx<len_max);jump+=collumn_jump,i++)
	{
	strncpy( (array2D+jump),&array1D[idx],len);
   *(array2D+jump+len)=0;
   idx+=len+1;
   if(idx>=len_max) return (i+1);
   }

return i;
}

_ALBAOS_NODEBUG
int SYS_Bit_Cpy(void *dst,int bit, int pos)
{

if(bit>0)
   {
   SET(dst,pos);
   return 1;
   }
else
	{
	RES(dst,pos);
   return 0;
   }

}

_ALBAOS_NODEBUG
int SYS_Bit_Cmp(void *arg1,void *arg2,int pos)
{
if(BIT(arg1,pos)==BIT(arg2,pos)) return 0;
else if(BIT(arg1,pos)>BIT(arg2,pos)) return 1;
else return -1;
}

_ALBAOS_NODEBUG
int SYS_Int32ToStr(char *buf,long int int32)
{
int * p;

p=(int *)&int32;

sprintf(buf,"%04X%04X",p[1],p[0]);

return strlen(buf);
}

_ALBAOS_NODEBUG
int SYS_Round_Float2Int16(float arg)
{
int a;

a=(int)arg;

if(arg-a>0.5) return a+1;
else return a;
}

_ALBAOS_NODEBUG
float SYS_Float2Prefix(float arg, int *div)
{
float val;

if((val=arg/1E09)>=0.999)
	{
   div[0]=SYS_Round_Float2Int16(val);
	div[1]='G';
   }
else if((val=arg/1E06)>=0.999)
	{
   div[0]=SYS_Round_Float2Int16(val);
	div[1]='M';
	}
else if((val=arg/1E03)>=0.999)
	{
   div[0]=SYS_Round_Float2Int16(val);
	div[1]='k';
	}
else if((val=arg)>=0.999)
	{
   div[0]=SYS_Round_Float2Int16(val);
	div[1]='\0';
   }
else if((val=arg*1E03)>=0.999)
	{
   div[0]=SYS_Round_Float2Int16(val);
	div[1]='m';
	}
else if((val=arg*1E06)>=0.999)
	{
   div[0]=SYS_Round_Float2Int16(val);
	div[1]='u';
	}
else if((val=arg*1E09)>=0.999)
	{
   div[0]=SYS_Round_Float2Int16(val);
	div[1]='n';
	}
else if((val=arg*1E12)>=0.999)
	{
   div[0]=SYS_Round_Float2Int16(val);
	div[1]='p';
	}
else
	{
   div[0]=SYS_Round_Float2Int16(val);
	div[1]='?';
   }

return val;
}

_ALBAOS_NODEBUG
int SYS_Float2EngStr(char *buf,float arg)
{
int len;
int div[3];
SYS_Float2Prefix(arg,div);
len=sprintf(buf,"%d%c",div[0],(char)div[1]);
return len;
}

/*
int SYS_Bit_SetRes(void * addr_out, unsigned int bit_no, char set_res_bit)
{
switch (set_res_bit)
{
  case 0:
  RES(addr_out,bit_no);
  break;
  case 1:
  SET(addr_out,bit_no);
  break;
  default: return -1;
}

return 1;
}
*/

/*
int SYS_Int4ToInt16_Wr(int pos, int *int16, int *int4)
{
char idx_int16;
char idx_int4;
char idx_int16_stop;
idx_int4=0;
idx_int16=4*pos;
idx_int16_stop=4*pos+4;

for(;idx_int16<idx_int16_stop;idx_int16++,idx_int4++)
	SYS_Bit_SetRes(int16,idx_int16,BIT(int4,idx_int4));

return pos;
}
*/


/*** BeginHeader */
#endif
/*** EndHeader */