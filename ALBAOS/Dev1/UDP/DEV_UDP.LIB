/* START LIBRARY DESCRIPTION *********************************************
DESCRIPTION:
This library provides an external data/address system for the strobe pin PE0,
IB0CR 0x0000–0x1FFF
END DESCRIPTION **********************************************************/

	//strukture "ll_Gather * g"
   //---------------------------------------------------------------
	// Datagram has come in.  It is in the Ethernet receive buffer.  No need to
	// copy it anywhere - we just transmit it straight back to the sender.
	// The relevant information comes in the following fields (not all of which
	// we use here) (see LIB\tcpip\net.lib for structure):
	//  g->data1  ->  IP and UDP headers (root)
	//  g->len1   ->  IP and UDP header length
	//  g->data2  ->  UDP datagram data (xmem) - first buffer
	//  g->len2   ->  UDP datagram data length - first buffer
	//  g->data3  ->  UDP datagram data (xmem) - second buffer **
	//  g->len3   ->  UDP datagram data length - second buffer
	//  udi->remip  -> sender's IP address
	//  udi->remport  ->  sender's UDP port number
	//  udi->flags  -> flags.

   // The 'event' parameter determines the type of event.  As of DC 7.30, this is either
	//  UDP_DH_INDATA : incoming datagram
	//  UDP_DH_ICMPMSG : incoming ICMP message.


/*** BeginHeader */
#ifndef __DEV_UDP_LIB
#define __DEV_UDP_LIB
/*** EndHeader */

/*** BeginHeader
UDP_Init,
UDP_User_Handler,
UDP_Event_Flag_Check,
*/
#include "/Dev1/UDP/DEV_UDP.H"

int UDP_Init(void);
int UDP_User_Handler(char *buf, int buf_max_len, struct _SYSOrd *ord);
int UDP_Event_Flag_Check(void);

/*** EndHeader */

static int UDP_Event;
static udp_Socket *UDP_pSock;
//static ll_Gather *UDP_pGath;
//static _udp_datagram_info *UDP_pDi;
static int UDP_Event_Flag=0;


#define UDP_Input_Buf_Len 256
static far char UDP_Buf[UDP_Input_Buf_Len];
static struct _SYSOrd UDP_Ord;


//<UDP_Handler>
_UDP_NODEBUG
int UDP_Handler(int event, udp_Socket * udpSock, ll_Gather * udpGath, _udp_datagram_info * udpDI)
{
	if (event == UDP_DH_ICMPMSG) {
		return 1;	// Just ignore incoming ICMP errors.
	}

   if(udpGath->len2>=UDP_Input_Buf_Len) return 0;

   UDP_Event_Flag=1;
	UDP_Event=event;
	UDP_pSock=udpSock;
//	UDP_pGath=udpGath;
//	UDP_pDi=udpDI;

//   printf("%d|%Fs\n",udpGath->len2,udpGath->data2);
   _f_memcpy(UDP_Buf, udpGath->data2, udpGath->len2);
   UDP_Buf[udpGath->len2]=0;

   UDP_Ord=SYSOrd_Null;
	UDP_Ord.Input=UDP_Buf;
//	UDP_Ord->Output=buf;
	UDP_Ord.Len=udpGath->len2;
	UDP_Ord.Ip=udpDI->remip;
	UDP_Ord.Port=udpDI->remport;

   return 1;
}
//</UDP_Handler>

_UDP_NODEBUG
int UDP_Init(void)
{
	if(!udp_extopen(&UDP_Sock, IF_ANY, DEV_UDP_LOCAL_PORT, -1L, 0, UDP_Handler, 0, 0)) {
//		printf("udp_extopen failed!\n");
		//Nice to implement an ERROR indicator
		exit(0);
	}
   udp_sendto(UDP_pSock, "", 0, 0, 0);

return 1;
}

//HANDLER defined by User
#ifndef __DEV_UDP_USER_HANDLER_H
#define __DEV_UDP_USER_HANDLER_H

_UDP_NODEBUG
int UDP_User_Handler(char *buf, int buf_max_len, struct _SYSOrd *ord)
{
int status=0;
int i;
int udp_ret;

//VERY IMPORTANT ***************************************************************
if (UDP_Event_Flag!=1) return 0;    //If no event detected
UDP_Event_Flag=0;
//VERY IMPORTANT ***************************************************************
//<UDP DATA CONFIGURATION>
UDP_Ord.Output=buf;
ord=&UDP_Ord;

//if(ord->Len>=buf_max_len) return -1;   //protection exists in the udp event function
//</UDP DATA CONFIGURATION>

//USER DEFINED
status=SYSOrd_Parse(ord);

if(status<0) SYSOrd_Ans(SYSOrdRef_Err,abs(status),ord);
else if(ord->Ref==EMOrdRef_Setting) SYSOrd_Ans(SYSOrdRef_Ans,SYSOrd_Ans_Repeat,ord);

//printf("%s",ord->Output);

if(ord->Idx>0)
	{
	for(i=0,udp_ret=-1;(i<2)&&(udp_ret<0);i++)
		{
		udp_ret=udp_sendto(UDP_pSock, ord->Output, ord->Idx+1, ord->Ip, ord->Port);  //+1 adds a null character to the transmission
   	if(udp_ret<0)tcp_tick(NULL);
   	}
   }

return udp_ret;
}
#endif

_UDP_NODEBUG
int UDP_Event_Flag_Check(void)
{
if (UDP_Event_Flag!=1) return 0;
else return 1;
}

/*** BeginHeader */
#endif
/*** EndHeader */




//<USEFUL>
/*
int echo_handler(int event, udp_Socket * s, ll_Gather * g,
						_udp_datagram_info * udi)
{

	if (event == UDP_DH_ICMPMSG) {
		return 1;	// Just ignore incoming ICMP errors.
	}


   printf("Got UDP  len1=%2u len2=%4u len3=%4u remip=%08lX remport=%5u len=%u\n",
   	g->len1, g->len2, g->len3, udi->remip, udi->remport, udi->len);

	if (!g->len3)
   	// No second buffer.  This is easy - just use udp_xsendto directly
		udp_xsendto(s, (long)g->data2, g->len2, udi->remip, udi->remport);
   else {
   	// Awkward: got 2 areas, so copy them into a contiguous root buffer and send.
		xmem2root(pktbuf, (long)g->data2, g->len2);
      xmem2root(pktbuf + g->len2, (long)g->data3, g->len3);
		udp_sendto(s, pktbuf, g->len2+g->len3, udi->remip, udi->remport);
   }

	// Return 1 to indicate that all processing has been done.  No copy to
	// normal udp socket receive buffer.
	return 1;
}
*/
//</USEFUL>