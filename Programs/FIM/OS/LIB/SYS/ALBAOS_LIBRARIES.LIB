/*** BeginHeader */
#ifndef __ALBAOS_LIBRARIES_LIB
#define __ALBAOS_LIBRARIES_LIB
/*** EndHeader */

/*** BeginHeader
SYS_DelayMs,SYS_DelayUs,SYS_HexLenDetect,SYS_Abs_UL,SYS_Str_isAllHex,
SYS_Detect_CharPos,SYS_Array_HardClear,SYS_Array_SoftClear,
SYS_HexStr2Dex,SYS_IntPow,SYS_Timestamp,SYS_Serialize_Int32,SYS_2DimTo1Dim
*/
#ifdef ALBAOS_LIB_DEBUG
#define _ALBAOS_LIB_NODEBUG
#else
#define _ALBAOS_LIB_NODEBUG nodebug
#endif

void SYS_Array_HardClear(char * array, int max);
void SYS_Array_SoftClear(char * array, int max);

void SYS_DelayMs(int iDelay);
void SYS_DelayUs(int iDelay);
int SYS_HexLenDetect(char * tab);
unsigned long SYS_Abs_UL(unsigned long var);
int SYS_Str_isAllHex(char *hex_str);
int SYS_Detect_CharPos(char *str, char character);
//int SYS_Init_intConst(int * constant,int value);
int SYS_HexStr2Dec(char *hexStr);
unsigned long int SYS_IntPow(int base,int ex);
unsigned long int SYS_Timestamp(int mode);
int SYS_Serialize_Int32(char * buf, unsigned long int int32);
int SYS_2DimTo1Dim(char * one_dim_buf, char ** two_dim_buf, char separator);

/*** EndHeader */

_ALBAOS_LIB_NODEBUG void SYS_DelayMs(int iDelay)
{
	unsigned long ul0;
	ul0 = MS_TIMER;				// get current timer value
	while ( MS_TIMER < ul0 + (unsigned long) iDelay );
}

//it works only for Rabbit 4000 - RCM4200
_ALBAOS_LIB_NODEBUG void SYS_DelayUs( int iDelay )
{
	int i;
	iDelay=(int)(iDelay*1.15);
	for ( i=0; i<iDelay; i++ );
}

_ALBAOS_LIB_NODEBUG
int SYS_HexLenDetect(char * tab)
{
int i;
int len;
len=strlen(tab);

for(i=0;i<=len;i++)
	if ( (tab[i]<0x30) || (tab[i]>0x39) )
   	if( (tab[i]<0x41) || (tab[i]>0x46)  )
      	return i;

return -1;
}

_ALBAOS_LIB_NODEBUG
unsigned long SYS_Abs_UL(unsigned long var)
{
if (var>=0) return var;
else return (-1*var);
}

_ALBAOS_LIB_NODEBUG
int SYS_Str_isAllHex(char *hex_str)
{
int i;
int len;
len=strlen(hex_str);

for(i=0;i<len;i++)
	{
	if(hex_str[i]<0x30) return -1;
   else if( (hex_str[i]>0x39) && (hex_str[i]<0x41) ) return -2;
   else if( hex_str[i]> 0x46) return -3;
   }

return 1;
}

_ALBAOS_LIB_NODEBUG
int SYS_Detect_CharPos(char *str, char character)
{
int i;
int len;
len=strlen(str);

for(i=0;i<len;i++)
	{
	if (str[i]==character) return i;
   }

return -1;
}

/*
_ALBAOS_LIB_NODEBUG
int SYS_Init_intConst(int * constant,int value)
{
(*constant)=value;
return 1;
}
*/

_ALBAOS_LIB_NODEBUG
void SYS_Array_HardClear(char * array, int max)
{
int i;

for(i=0;i<max;i++) array[i]=0;
}

_ALBAOS_LIB_NODEBUG
void SYS_Array_SoftClear(char * array, int max)
{
int i;
int len;

len=strlen(array);
for(i=0;(i<len) && (i<max);i++) array[i]=0;
}

_ALBAOS_LIB_NODEBUG
unsigned long int SYS_IntPow(int base,int ex)
{
int i;
unsigned long int ulong;
ulong=1;
for(i=0;i<ex;i++) ulong*=base;
return ulong;
}

_ALBAOS_LIB_NODEBUG
int SYS_HexStr2Dec(char *hexStr)
{
int dec;
int i;
int len;

dec=0;
len=SYS_HexLenDetect(hexStr);

if(len>3) return 0;

for(i=0;i<len;i++)
	{

   switch ( toupper(hexStr[i]) )
   {
     case 'F' :
     dec+=15*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'E' :
     dec+=14*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'D' :
     dec+=13*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'C' :
     dec+=12*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'B' :
     dec+=11*((int)SYS_IntPow(16,len-1-i));
     break;

     case 'A' :
     dec+=10*((int)SYS_IntPow(16,len-1-i));
     break;

     default:
     dec+=(hexStr[i]-48)*((int)SYS_IntPow(16,len-1-i));
   }


   }

return dec;
}


_ALBAOS_LIB_NODEBUG
unsigned long int SYS_Timestamp(int mode)
{
static unsigned long int timestamp;

#GLOBAL_INIT{
timestamp=0;
}

switch (mode)
{
  case 1:
  timestamp=MS_TIMER;
  return 0;
  break;

  case 2:
  return SYS_Abs_UL(MS_TIMER-timestamp);
  break;

  case 3:
  printf("\nST==%u[ms]", (int) SYS_Abs_UL(MS_TIMER-timestamp) );
  return 0;
  break;

  default: return -1;
}

return -1;
}

_ALBAOS_LIB_NODEBUG
int SYS_Serialize_Int32(char * buf, unsigned long int int32)
{
int i;
int len;

len=sizeof(int32)*8;

for(i=0;i<len;i++)
	if(BIT(&int32,i)==1) buf[i]='1';
   else buf[i]='0';

buf[i]=0;
return i;
}

_ALBAOS_LIB_NODEBUG
int SYS_2DimTo1Dim(char * one_dim_buf, char ** two_dim_buf, char separator)
{
int i;
int len;
int char_idx;

char_idx=0;

for(i=0;(len=strlen(&two_dim_buf[i][0]))!=0;i++)
	{
   if(i!=0)
   	{
      one_dim_buf[char_idx]=separator;
      char_idx++;
      }
	strncpy(&one_dim_buf[char_idx],&two_dim_buf[i][0],len);
   char_idx+=len;
   }

one_dim_buf[char_idx]=0;
return char_idx;
}



/*
_ALBAOS_LIB_NODEBUG void SYS_Array_Clear(char * array, int max)
{
int i;
int len;

len=strlen(array);
for(i=0;(i<len) && (i<max);i++) array[i]=0;
}
*/

/*** BeginHeader */
#endif
/*** EndHeader */