/*** BeginHeader */
#ifndef __EM_ORD_API_LIB
#define __EM_ORD_API_LIB
/*** EndHeader */

/*** BeginHeader
EM_ORD_API_Range_Det,
EM_ORD_API_Handler,
EM_ORD_API_retConfirm_Handler,
*/
#ifdef EM_ORD_DEBUG
#define _EM_ORD_NODEBUG
#else
#define _EM_ORD_NODEBUG nodebug
#endif

#use "EM_ORD_QUERY_API.LIB"
#use "EM_ORD_SETTING_API.LIB"

#define EM_ORD_ANS_CH_1ARG(x) ord->Idx+=sprintf(&ord->Output[ord->Idx],ord->Ref[ord->Id].Ans,ch+1,x)
#define EM_ORD_ANS_1ARG(x) ord->Idx+=sprintf(&ord->Output[ord->Idx],ord->Ref[ord->Id].Ans,x)
#define EM_ORD_ANS_BASIC(x) EM_ORD_API_retConfirm_Handler(ord);EM_ORD_ANS_1ARG(x)

int EM_ORD_API_Range_Det			(struct _SYSOrd *ord);
int EM_ORD_API_MultiCh_Handler	(struct _SYSOrd *ord,int (*func)());
void EM_ORD_API_retConfirm_Handler(struct _SYSOrd *ord);
/*** EndHeader */
_EM_ORD_NODEBUG
int EM_ORD_API_areParams(struct _SYSOrd *ord)
{
//if( (ord->Input[ord->Ref[ord->Id].Len]!=0) && (ord->Input[ord->Idx-1]!=0) && (ord->Input[ord->Idx]!=0) ) return 1;
if(ord->Input[ord->Ref[ord->Id].Len]!=0) return 1;
else return -1;
}

_EM_ORD_NODEBUG
void EM_ORD_API_retConfirm_Handler(struct _SYSOrd *ord)
{
ord->Idx=0;
ord->Idx+=sprintf(&ord->Output[ord->Idx],SYSOrd_Prefix_Ans,ord->Ref[ord->Id].Syntax);
}

_EM_ORD_NODEBUG
int EM_ORD_API_Range_Det	(struct _SYSOrd *ord)
{
char * arg;
int params;
int range;

arg=&ord->Output[100];

EM_ORD_API_retConfirm_Handler(ord);
if(EM_ORD_API_areParams(ord)>0) params=sscanf(&ord->Input[ord->Idx]," %10s",arg);
if(params!=1) return (-SYSOrd_ERR_SYNTAX);

if( (range=EM_Range_Conv(arg))<0) return (-SYSOrd_ERR_SYNTAX);

ord->Idx+=sprintf(&ord->Output[ord->Idx]," %s",arg);
ord->Arg=range;

return 1;
}

_EM_ORD_NODEBUG
int EM_ORD_API_MultiCh_Handler		(struct _SYSOrd *ord,int (*func)())
{
int i;
int params;
int ch[4];
int ret_stat;

if(ord->Len<ord->Ref[ord->Id].Len) return (-SYSOrd_ERR_SYNTAX);
if(ord->Idx<=0) EM_ORD_API_retConfirm_Handler(ord);

for(i=0;i<EM_SENSOR_MAX;i++) ch[i]=0;
params=0;

if(EM_ORD_API_areParams(ord)>0)
{

if(ord->Ref==EMOrdRef_Query)
	{
    //outlaw commands EM_QLDATA introduces to ord->Idx the sample number for example 999
	if(ord->Id==EM_QLDATA) params=sscanf(&ord->Input[ord->Ref[ord->Id].Len],ord->Ref[ord->Id].Arg,&ch[0],&ch[1],&ch[2],&ch[3]);
	else params=sscanf(&ord->Input[ord->Idx],ord->Ref[ord->Id].Arg,&ch[0],&ch[1],&ch[2],&ch[3]);
	}
else if (ord->Ref==EMOrdRef_Setting)
	{
	params=sscanf(&ord->Input[ord->Idx],ord->Ref[ord->Id].Arg,
   &ch[0],&ord->Output[100],
   &ch[1],&ord->Output[120],
   &ch[2],&ord->Output[140],
   &ch[3],&ord->Output[160]);

	params=params/2;
	if(params<=0) return (-SYSOrd_ERR_SYNTAX);
	}

}

if ( (params<=0) && (ord->Ref==EMOrdRef_Setting) ) return (-SYSOrd_ERR_SYNTAX);

if (params<=0)
	{
	for(i=0;i<EM_SENSOR_MAX;i++)
   	{
   	if( (ret_stat=func(ord,i,&ord->Output[100+i*20]))<0 ) return ret_stat;
      }

   ord->Output[ord->Idx]='\0';
   return 1;
   }
else
	{
	for(i=0;i<params;i++)
		if(((ch[i]==1)||(ch[i]==2)||(ch[i]==3)||(ch[i]==4))&&(ch[i]-1<EM_SENSOR_MAX))
      	{
      	if( (ret_stat=func(ord,ch[i]-1,&ord->Output[100+i*20])) <0 ) return ret_stat;
         }
      else
			return (-SYSOrd_ERR_SYNTAX);

   ord->Output[ord->Idx]='\0';
   return 1;
	}

return 1;
}


/*** BeginHeader */
#endif
/*** EndHeader */