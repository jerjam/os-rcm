/*** BeginHeader */
#ifndef __MENU1_HVS_LIB
#define __MENU1_HVS_LIB
/*** EndHeader */


/*** BeginHeader
Menu1_Keypad_Exit,Menu1_Keypad_Ok,Menu1_Keypad_Down,Menu1_Keypad_Up,Menu1_Data,Menu1_AlbaLogo,
Menu1_Background_Current,Menu1_Background_Pressure,Menu1_Data_Handler,
*/

#use "Menu_HVS.lib"

#define Menu1_Gauge 40

_MENU_HVS_NODEBUG void Menu1_Keypad_Exit(void);
_MENU_HVS_NODEBUG void Menu1_Keypad_Ok(void);
_MENU_HVS_NODEBUG void Menu1_Keypad_Down(void);
_MENU_HVS_NODEBUG void Menu1_Keypad_Up(void);
_MENU_HVS_NODEBUG void Menu1_Data(char channel1, char channel2);
_MENU_HVS_NODEBUG void Menu1_AlbaLogo(void);
_MENU_HVS_NODEBUG void Menu1_Background_Current(void);
_MENU_HVS_NODEBUG void Menu1_Background_Pressure(void);
_MENU_HVS_NODEBUG cofunc void Menu1_Data_Handler(void);
//void Menu1_Remove_Alert_Box(void);


struct{
char Element_ID;
char Toggle;
char Activity;
}Menu1;

char * const Menu1_Body[]={
"Channel ",
"P(mbar)=",
" I (A) ="
};

char * const Menu1_StringAlbaLogo[]={
"ALBA Synchrotron",
"  High Voltage  ",
"    Splitter    ",
"Press\"EXIT\"~Menu",
};

char * const Menu1_Text_None={
" <ZERO> "
};

char * const Menu1_Text_Error={
" <ERROR>"
};

char * const Menu1_Text_NoCal={
" <CAL?>"
};

char * const Menu1_Text_CalCleaner={
"       "
};


/*** EndHeader */



/***************************** START ********************************
*******************FUNCTIONS HANDLING THE MENU1 *********************
*********************************************************************/
_MENU_HVS_NODEBUG
void Menu1_Background_Pressure()
{
	LCD_Display_Clear();
	LCD_Locate(1,1);
	LCD_Write_Text(Menu1_Body[0]);
   LCD_Locate(2,1);
   LCD_Write_Text(Menu1_Body[1]);
   LCD_Locate(3,1);
	LCD_Write_Text(Menu1_Body[0]);
   LCD_Locate(4,1);
   LCD_Write_Text(Menu1_Body[1]);
}
_MENU_HVS_NODEBUG
void Menu1_Background_Current()
{
	LCD_Display_Clear();
	LCD_Locate(1,1);
	LCD_Write_Text(Menu1_Body[0]);
   LCD_Locate(2,1);
   LCD_Write_Text(Menu1_Body[2]);
   LCD_Locate(3,1);
	LCD_Write_Text(Menu1_Body[0]);
   LCD_Locate(4,1);
   LCD_Write_Text(Menu1_Body[2]);
}
_MENU_HVS_NODEBUG
void Menu1_AlbaLogo()
{
//	LCD_Display_Clear();
	LCD_Locate(1,1);
	LCD_Write_Text(Menu1_StringAlbaLogo[0]);
   LCD_Locate(2,1);
   LCD_Write_Text(Menu1_StringAlbaLogo[1]);
   LCD_Locate(3,1);
	LCD_Write_Text(Menu1_StringAlbaLogo[2]);
//   LCD_Locate(3,11);LCD_Write_Text(Sys_Return_SN());
   LCD_Locate(4,1);
   LCD_Write_Text(Menu1_StringAlbaLogo[3]);
}

_MENU_HVS_NODEBUG
void Menu1_Data_Current_ChX(int chan, char row)
{
   LCD_Locate(row,9);
	LCD_Write_Char(chan+48);
   if (BIT(&System_Flag.Calibration,chan-1)==0) LCD_Write_Text(Menu1_Text_NoCal);
   else LCD_Write_Text(Menu1_Text_CalCleaner);

	LCD_Locate(row+1,9);
   if(Broken_Channel.FlashFlag[chan-1]>0) LCD_Write_Text(Menu1_Text_Error);
   else if(ADC.FinalMean[chan-1]<Menu1_Gauge) LCD_Write_Text(Menu1_Text_None);
	else LCD_Write_Text(General_Convert_Float2StringScientific_Dot2(System.Current[chan-1]));
}

_MENU_HVS_NODEBUG
void Menu1_Data_Pressure_ChX(int chan,char row)
{
   LCD_Locate(row,9);
	LCD_Write_Char(chan+48);
   if (BIT(&System_Flag.Calibration,chan-1)==0) LCD_Write_Text(Menu1_Text_NoCal);
   else LCD_Write_Text(Menu1_Text_CalCleaner);

	LCD_Locate(row+1,9);
   if(Broken_Channel.FlashFlag[chan-1]>0) LCD_Write_Text(Menu1_Text_Error);
   else if(ADC.FinalMean[chan-1]<Menu1_Gauge) LCD_Write_Text(Menu1_Text_None);
   else LCD_Write_Text(General_Convert_Float2StringScientific_Dot2(System.Pressure[chan-1]));
}

_MENU_HVS_NODEBUG
void Menu1_Keypad_Up()
{
Menu1.Element_ID--;

if (Menu1.Element_ID==1) Menu1_AlbaLogo();
Menu1.Activity=1;
}

_MENU_HVS_NODEBUG
void Menu1_Keypad_Down()
{
Menu1.Element_ID++;

if (Menu1.Element_ID==2)
	{
	if (!Menu1.Toggle) Menu1_Background_Pressure();
   else Menu1_Background_Current();
   }

Menu1.Activity=1;
}

_MENU_HVS_NODEBUG
void Menu1_Keypad_Ok()
{
	Menu1.Toggle=General_Invert_Bool(Menu1.Toggle);

if (Menu1.Element_ID>1)
	{
	if (!Menu1.Toggle) Menu1_Background_Pressure();
	else Menu1_Background_Current();
	}

Menu1.Activity=1;
}

_MENU_HVS_NODEBUG
void Menu1_Keypad_Exit()
{
	Menu_Mod_Toggle();
}

/********************************************************************
******************* FUNCTIONS HANDLING THE MENU1 ********************
******************************* END *********************************/
void Menu1_Data_TextBox_X(int chan,int toggler)
{
   	if (toggler)
         {
         Menu1_Data_Pressure_ChX(chan,1);
         Menu1_Data_Pressure_ChX(chan+1,3);
         }
      else
      	{
         Menu1_Data_Current_ChX(chan,1);
         Menu1_Data_Current_ChX(chan+1,3);
         }
}

_MENU_HVS_NODEBUG
cofunc void Menu1_Data_Handler(void)
{
while(Menu.Mode==0)
 {

	if((Menu1.Element_ID<1) || (Menu1.Element_ID>50))
	{
		Menu1.Element_ID=1;
   }
   else if (Menu1.Element_ID>HVS.No_Of_Outputs) Menu1.Element_ID=HVS.No_Of_Outputs;
	else if (Menu1.Element_ID>8)
	{
		Menu1.Element_ID=8;
   }

	switch (Menu1.Element_ID)
	{
	case 1:
   Menu1_AlbaLogo();
	break;

	case 2:
   Menu1_Data_TextBox_X(1,!Menu1.Toggle);
	break;

	case 3:
   Menu1_Data_TextBox_X(2,!Menu1.Toggle);
	break;

	case 4:
   Menu1_Data_TextBox_X(3,!Menu1.Toggle);
	break;

	case 5:
   Menu1_Data_TextBox_X(4,!Menu1.Toggle);
	break;

	case 6:
   Menu1_Data_TextBox_X(5,!Menu1.Toggle);
	break;

	case 7:
   Menu1_Data_TextBox_X(6,!Menu1.Toggle);
	break;

	case 8:
   Menu1_Data_TextBox_X(7,!Menu1.Toggle);
	break;

 }

   //*******************
   //costate
    if (Message_Box.On==0)
      {
//       wfd Menu_Button_Wait4Get_PlusTimer(1000);
		waitfor( (Keypad_Detect_KeyPress()>0) || (DelayMs(1000)) );
      }

    if (Message_Box.On>=1)
      {
 		waitfor(Ret_Alert_Ocurence==0);
      LCD_Display_Clear();
   	if ((!Menu1.Toggle) && (Menu1.Element_ID>1)) Menu1_Background_Pressure();
   	else if (Menu1.Element_ID>1) Menu1_Background_Current();
      Message_Box.On=0;
      }

   //costate
   //*******************

 }

}

/*** BeginHeader */
#endif
/*** EndHeader */