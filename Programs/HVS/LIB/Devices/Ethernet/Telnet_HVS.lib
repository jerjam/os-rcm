/*** BeginHeader */
#ifndef __TELNET_HVS_LIB
#define __TELNET_HVS_LIB
/*** EndHeader */

/*** BeginHeader
Telnet_Order_Execute,Telnet_Diode_Handler,Telnet_CalRawData_All_Get_Line
*/
#ifdef TELNET_HVS_DEBUG
#define _TELNET_HVS_NODEBUG
#else
#define _TELNET_HVS_NODEBUG nodebug
#endif

#use "Serial_Flash_HVS.lib"
#use "Telnet_Pattern_HVS.lib"
#use "Telnet_Message_HVS.lib"

#define Telnet_NewLine sock_fastwrite(state->s, "\r\n", 2)
#define Telnet_Syntax_Error sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16)
#define Telnet_Syntax_Error_Designator 0xFF
#define Telnet_Response sock_fastwrite(state->s,"<<", 2)

_TELNET_HVS_NODEBUG void Telnet_CalRawData_All_Get_Line(void);

_TELNET_HVS_NODEBUG void Telnet_Order_Execute(char *buf, int len);
_TELNET_HVS_NODEBUG cofunc void Telnet_Diode_Handler(void);

/*** EndHeader */

//******************************************************************************
//**************************************HELP************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_Help_Handler(void)
{
char i;
char *string_pointer;

sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"no.|Order\r\n", 11);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
for(i=0;i<Telnet_Orders_No;i++)
	{
   string_pointer=&Telnet_Pattern[i][0];
   sock_fastwrite(state->s,General_Convert_Int2String3(i)+1,3);
   sock_fastwrite(state->s,"|", 1);
   sock_fastwrite(state->s, string_pointer, strlen(string_pointer));
   Telnet_NewLine;
   tcp_tick(state->s);
	}
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
}
//**************************************HELP************************************

//******************************************************************************
//**************************************MODE************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_Order_Mode_Set(char value)
{
if((value==1) || (value==2)) System_Flag.HVS_Mode=value;
else Telnet_Syntax_Error;
}

_TELNET_HVS_NODEBUG
void Telnet_Order_Mode_Get(void)
{
char char_converter;

   char_converter=System_Flag.HVS_Mode+48;
   Telnet_Response;
   sock_fastwrite(state->s, &char_converter, 1);
   Telnet_NewLine;
}

_TELNET_HVS_NODEBUG
void Telnet_Mode_Handler(char *buf,int len)
{
char index;
char index1;
char helper_char;

   index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"set",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);
      Telnet_Order_Mode_Set(helper_char);
      }
	else if(strncmpi(&buf[index+1],"get",3)==0)
   	{
			Telnet_Order_Mode_Get();
      }
   else Telnet_Syntax_Error;
}
//**************************************MODE************************************

//******************************************************************************
//********************************VOLTAGE***************************************
//******************************************************************************

_TELNET_HVS_NODEBUG
void Telnet_Voltage_Get(char channel_number)
{
Telnet_Response;
sock_fastwrite(state->s, General_Convert_Float2StringDot2(Calculate_Voltage(ADC.FinalMean[channel_number-1])), 5);
Telnet_NewLine;
}

_TELNET_HVS_NODEBUG
void Telnet_Voltage_Buffer1_Get(char channel_number)
{
int i;

sock_fastwrite(state->s,Telnet_Text_Line9, 11);
sock_fastwrite(state->s,"no.| V[V]\r\n", 11);
sock_fastwrite(state->s,Telnet_Text_Line9, 11);
for(i=0;i<256;i++)
	{
	sock_fastwrite(state->s,General_Convert_Int2String3(i),3);
   sock_fastwrite(state->s,"|", 1);
	sock_fastwrite(state->s,General_Convert_Float2StringDot2(Calculate_Voltage(ADC.RawData[channel_number-1][i])),5);
   Telnet_NewLine;
  	tcp_tick(state->s);
   }
sock_fastwrite(state->s,Telnet_Text_Line9, 11);
}

_TELNET_HVS_NODEBUG
void Telnet_Voltage_Buffer2_Get(char channel_number)
{
int i;

sock_fastwrite(state->s,Telnet_Text_Line9, 11);
sock_fastwrite(state->s,"no.| V[V]\r\n", 11);
sock_fastwrite(state->s,Telnet_Text_Line9, 11);
for(i=0;i<(N_Max>>ADC.MeanDivider);i++)
	{
	sock_fastwrite(state->s,General_Convert_Int2String3(i),3);
   sock_fastwrite(state->s,"|", 1);
	sock_fastwrite(state->s,General_Convert_Float2StringDot2(Calculate_Voltage(ADC.MeanArray[channel_number-1][i])),5);
   Telnet_NewLine;
  	tcp_tick(state->s);
   }
sock_fastwrite(state->s,Telnet_Text_Line9, 11);
}


_TELNET_HVS_NODEBUG
void Telnet_Voltage_Get_All_Handler(void)
{
char buf[20];
int len;
int i;

sock_fastwrite(state->s, "<V[V]/", 6);

for(i=0;i<HVS.No_Of_Outputs;i++)
	{
   len=sprintf(buf,"%.02f",Return_Voltage(i));
	sock_fastwrite(state->s, buf, len);
   if (i<HVS.No_Of_Outputs-1) sock_fastwrite(state->s, ":", 1);
   else sock_fastwrite(state->s, ">", 1);
   tcp_tick(state->s);
	}

Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Voltage_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;
helper_char=index=index1=index2=0xFF;

   index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"get_all",7)==0)
   	{
      Telnet_Voltage_Get_All_Handler();
      }
   else if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"ch",2)==0)
      	{
      	index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
//         printf("%d",helper_char);
      	if((helper_char!=0) && (helper_char<9)) Telnet_Voltage_Get(helper_char);
         else Telnet_Syntax_Error;
      	}
      else if(strncmpi(&buf[index1+1],"buffer1",7)==0)
   		{
      	index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
//         printf("%d",helper_char);
      	if((helper_char!=0) && (helper_char<9)) Telnet_Voltage_Buffer1_Get(helper_char);
      	else Telnet_Syntax_Error;
      	}
		else if(strncmpi(&buf[index1+1],"buffer2",7)==0)
   		{
      	index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
//         printf("%d",helper_char);
      	if((helper_char!=0) && (helper_char<9)) Telnet_Voltage_Buffer2_Get(helper_char);
      	else Telnet_Syntax_Error;
      	}
      else Telnet_Syntax_Error;
   	}
   else Telnet_Syntax_Error;
}
//********************************VOLTAGE***************************************

//******************************************************************************
//********************************CURRENT***************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_Current_Get(char channel_number)
{
char buf[20];
int len;

len=sprintf(buf,"%.02e",System.Current[channel_number-1]);

Telnet_Response;
sock_fastwrite(state->s,buf,len);
Telnet_NewLine;
}

_TELNET_HVS_NODEBUG
void Telnet_Current_Buffer1_Get(char channel_number)
{
int i;
char buf[20];
int len;
int flag;

if (BIT(&System_Flag.Calibration,channel_number-1)==0) flag=-1;
else flag=1;

sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"no.|  I[A]  \r\n", 14);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
for(i=0;i<256;i++)
	{
	sock_fastwrite(state->s,General_Convert_Int2String3(i),3);
   sock_fastwrite(state->s,"|", 1);

   if(flag==1) len=sprintf(buf,"%.02e",Calculate_Calibrated_Current(channel_number-1,ADC.RawData[channel_number-1][i]));
   else len=sprintf(buf,"%.02e",Calculate_Current(ADC.RawData[channel_number-1][i]));

	sock_fastwrite(state->s,buf,len);
   Telnet_NewLine;
  	tcp_tick(state->s);
   }
sock_fastwrite(state->s,Telnet_Text_Line12, 14);

if(flag==-1)
   {
   sock_fastwrite(state->s,"Non-calibrated",14);
   sock_fastwrite(state->s,Telnet_Text_Line12, 14);
   Telnet_NewLine;
  	tcp_tick(state->s);
	}
}

_TELNET_HVS_NODEBUG
void Telnet_Current_Buffer2_Get(char channel_number)
{
int i;
char buf[20];
int len;
int flag;

if (BIT(&System_Flag.Calibration,channel_number-1)==0) flag=-1;
else flag=1;

sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"no.|  I[A]  \r\n", 14);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);

for(i=0;i<(N_Max>>ADC.MeanDivider);i++)
	{
	sock_fastwrite(state->s,General_Convert_Int2String3(i),3);
   sock_fastwrite(state->s,"|", 1);

   if(flag==1) len=sprintf(buf,"%.02e",Calculate_Calibrated_Current(channel_number-1,ADC.MeanArray[channel_number-1][i]));
   else len=sprintf(buf,"%.02e",Calculate_Current(ADC.MeanArray[channel_number-1][i]));

	sock_fastwrite(state->s,buf,len);
   Telnet_NewLine;
  	tcp_tick(state->s);
   }
sock_fastwrite(state->s,Telnet_Text_Line12, 14);

if(flag==-1)
   {
   sock_fastwrite(state->s,"Non-calibrated",14);
   sock_fastwrite(state->s,Telnet_Text_Line12, 14);
   Telnet_NewLine;
  	tcp_tick(state->s);
	}
}

_TELNET_HVS_NODEBUG
void Telnet_Current_Get_All_Handler(void)
{
char buf[20];
int i;
int len;

sock_fastwrite(state->s,"<I[A]/", 6);

for(i=0;i<HVS.No_Of_Outputs;i++)
	{
	len=sprintf(buf,"%.02e",System.Current[i]);
   sock_fastwrite(state->s, buf, len);
   if (i<HVS.No_Of_Outputs-1) sock_fastwrite(state->s, ":", 1);
   else sock_fastwrite(state->s, ">", 1);
	}

Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Current_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;

   index=General_Detect_Char('=',buf,len);

   if(strncmpi(&buf[index+1],"get_all",7)==0)
   {
   Telnet_Current_Get_All_Handler();
   }
   else if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"ch",2)==0)
      	{
      	index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
//         printf("%d",helper_char);
      	if((helper_char!=0) && (helper_char<9)) Telnet_Current_Get(helper_char);
         else Telnet_Syntax_Error;
      	}
      else if(strncmpi(&buf[index1+1],"buffer1",7)==0)
   		{
      	index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
//         printf("%d",helper_char);
      	if((helper_char!=0) && (helper_char<9)) Telnet_Current_Buffer1_Get(helper_char);
      	else Telnet_Syntax_Error;
      	}
		else if(strncmpi(&buf[index1+1],"buffer2",7)==0)
   		{
      	index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
//         printf("%d",helper_char);
      	if((helper_char!=0) && (helper_char<9)) Telnet_Current_Buffer2_Get(helper_char);
      	else Telnet_Syntax_Error;
      	}
      else Telnet_Syntax_Error;
   	}
   else Telnet_Syntax_Error;
}
//********************************CURRENT***************************************

//******************************************************************************
//********************************PRESSURE**************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_Pressure_Get(char channel_number)
{
char buf[20];
int len;

len=sprintf(buf,"%.02e",System.Pressure[channel_number-1]);
Telnet_Response;
sock_fastwrite(state->s,buf,len);
Telnet_NewLine;
}

_TELNET_HVS_NODEBUG
void Telnet_Pressure_Buffer1_Get(char channel_number)
{
int i;
char buf[20];
int len;
int flag;

if (BIT(&System_Flag.Calibration,channel_number-1)==0) flag=-1;
else flag=1;

sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"no.| P[mbar]\r\n", 14);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
for(i=0;i<256;i++)
	{
	sock_fastwrite(state->s,General_Convert_Int2String3(i),3);
   sock_fastwrite(state->s,"|", 1);

   if(flag==1) len=sprintf(buf,"%.02e",
   Sys_Ret_Px(channel_number-1,Calculate_Calibrated_Current(channel_number-1,ADC.RawData[channel_number-1][i])));
   else len=sprintf(buf,"%.02e",
   Sys_Ret_Px(channel_number-1,Calculate_Current(ADC.RawData[channel_number-1][i])));

   len=sprintf(buf,"%.02e",System.Pressure[channel_number-1]);
	sock_fastwrite(state->s,buf,len);
   Telnet_NewLine;
  	tcp_tick(state->s);
   }
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
if(flag==-1)
   {
   sock_fastwrite(state->s,"Non-calibrated",14);
   sock_fastwrite(state->s,Telnet_Text_Line12, 14);
   Telnet_NewLine;
  	tcp_tick(state->s);
	}

}

_TELNET_HVS_NODEBUG
void Telnet_Pressure_Buffer2_Get(char channel_number)
{
int i;
int len;
char buf[20];
int flag;

if (BIT(&System_Flag.Calibration,channel_number-1)==0) flag=-1;
else flag=1;

sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"no.| P[mbar]\r\n", 14);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
for(i=0;i<(N_Max>>ADC.MeanDivider);i++)
	{
	sock_fastwrite(state->s,General_Convert_Int2String3(i),3);
   sock_fastwrite(state->s,"|", 1);

   if(flag==1) len=sprintf(buf,"%.02e",
   Sys_Ret_Px(channel_number-1,Calculate_Calibrated_Current(channel_number-1,ADC.MeanArray[channel_number-1][i])));
   else len=sprintf(buf,"%.02e",
   Sys_Ret_Px(channel_number-1,Calculate_Current(ADC.MeanArray[channel_number-1][i])));

	sock_fastwrite(state->s,buf,len);
   Telnet_NewLine;
  	tcp_tick(state->s);
   }
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
if(flag==-1)
   {
   sock_fastwrite(state->s,"Non-calibrated",14);
   sock_fastwrite(state->s,Telnet_Text_Line12, 14);
   Telnet_NewLine;
  	tcp_tick(state->s);
	}
}

_TELNET_HVS_NODEBUG
void Telnet_Pressure_Get_All_Handler(void)
{
char buf[20];
int len;
int i;

sock_fastwrite(state->s,"<P[mbar]/", 9);

for(i=0;i<HVS.No_Of_Outputs;i++)
	{
   len=sprintf(buf,"%.02e",System.Pressure[i]);
	sock_fastwrite(state->s, buf, len);
   if (i<HVS.No_Of_Outputs-1) sock_fastwrite(state->s, ":", 1);
   else sock_fastwrite(state->s, ">", 1);
   tcp_tick(state->s);
	}

Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Pressure_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;
helper_char=index=index1=index2=0xFF;

   index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"get_all",7)==0)
   	{
   	Telnet_Pressure_Get_All_Handler();
      }
   else if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"ch",2)==0)
      	{
      	index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
//         printf("%d",helper_char);
      	if((helper_char!=0) && (helper_char<9)) Telnet_Pressure_Get(helper_char);
         else Telnet_Syntax_Error;
      	}
      else if(strncmpi(&buf[index1+1],"buffer1",7)==0)
   		{
      	index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
//         printf("%d",helper_char);
      	if((helper_char!=0) && (helper_char<9)) Telnet_Pressure_Buffer1_Get(helper_char);
      	else Telnet_Syntax_Error;
      	}
		else if(strncmpi(&buf[index1+1],"buffer2",7)==0)
   		{
      	index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
//         printf("%d",helper_char);
      	if((helper_char!=0) && (helper_char<9)) Telnet_Pressure_Buffer2_Get(helper_char);
      	else Telnet_Syntax_Error;
      	}
      else Telnet_Syntax_Error;
   	}
   else Telnet_Syntax_Error;
}
//General_Convert_Float2StringScientific_Dot2(Calculate_Pressure(Calculate_Current(ADC.MeanArray[channel_number-1][i]),7000,1.33,1,HVS_IonPump_Models[HVS.IonPump_Model[channel_number-1]))
//********************************PRESSURE**************************************


//******************************************************************************
//**************************Aquisition_Time*************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_Aquisition_Time_Get(void)
{
char buf[16];
float acquisition_time;

acquisition_time= (float) (ADC.Acquisition_Time * (N_Max>>ADC.MeanDivider)) ;
sprintf(buf,"%.0f[ms]",acquisition_time);

Telnet_Response;
sock_fastwrite(state->s,buf,strlen(buf));
Telnet_NewLine;
}
//**************************Aquisition_Time*************************************

//******************************************************************************
//**************************ION PUMPS*******************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
int Telnet_Ion_Type_Set(char channel_number, int ion_type)
{
char i;
for(i=0;i<13;i++)
	{
	if(I2Pref[i].Model==ion_type)
      {
      System.I2P_Tab_Ch[channel_number-1]=i;
   	return 1;
      }
   }
return 0;
}

_TELNET_HVS_NODEBUG
void Telnet_Ion_Pump_Get_All_Handler(void)
{
char i;
char buf[20];
int len;

sock_fastwrite(state->s,"<ION/", 5);

for(i=0;i<HVS.No_Of_Outputs;i++)
	{
   len=sprintf(buf,"%d",I2Pref[System.I2P_Tab_Ch[i]].Model);
	sock_fastwrite(state->s, buf, len);
   if (i<HVS.No_Of_Outputs-1) sock_fastwrite(state->s, ":", 1);
   else sock_fastwrite(state->s, ">", 1);
   tcp_tick(state->s);
	}

Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Ion_Type_Get(char channel_number)
{
int ion_type;
char *p2string;
ion_type=I2Pref[System.I2P_Tab_Ch[channel_number-1]].Model;

p2string=General_Convert_Int2String(ion_type);

Telnet_Response;
sock_fastwrite(state->s,p2string,strlen(p2string));
Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Ion_Type_Show()
{
char i;
char text[32];
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"no.|Type/\r\n", 11);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
for(i=0;i<12;i++)
	{
   sock_fastwrite(state->s,General_Convert_Int2String3(i),3);
   sock_fastwrite(state->s,"|", 1);

		if(I2Pref[i].Model<9)
			{
			sprintf(text, "CST:%d", I2Pref[i].Model);
			}
		else sprintf(text, "ION:%dl/s", I2Pref[i].Model);

   sock_fastwrite(state->s,text, strlen(text) );
   Telnet_NewLine;
	}
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
tcp_tick(state->s);
}


_TELNET_HVS_NODEBUG
void Telnet_IonPump_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;
int helper_int;
helper_char=index=index1=index2=0xFF;
helper_int=0xFF;

   index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"get_all",7)==0)
   	{
      Telnet_Ion_Pump_Get_All_Handler();
      }
   else if(strncmpi(&buf[index+1],"set",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);
      if((helper_char!=0) && (helper_char<9))
      	{
         index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_int = atoi(&buf[index1+index2+1+1]);
         if(Telnet_Ion_Type_Set(helper_char,helper_int)==0)
         	sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
         }
      else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
      }
   else if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);
      if((helper_char!=0) && (helper_char<9))
      	{
         Telnet_Ion_Type_Get(helper_char);
         }
      else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
      }
   else if(strncmpi(&buf[index+1],"show",4)==0)
   	{
   	Telnet_Ion_Type_Show();
      }
   else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
}

//******************************************************************************
//**************************MEAN DIVIDER****************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_Mean_Divider_Set(char divider)
{
if(divider<9) ADC.MeanDivider=divider;
}

void Telnet_Mean_Config_Show(void)
{
char i;
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"div|[sample]\n\r", 14);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
for(i=0;i<9;i++)
	{
   sock_fastwrite(state->s,General_Convert_Int2String3(i),3);
   sock_fastwrite(state->s,"|", 1);
	sock_fastwrite(state->s,General_Convert_Int2String3(256>>i),3);
   Telnet_NewLine;
	}
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Mean_Divider_Get(void)
{
Telnet_Response;
sock_fastwrite(state->s, General_Convert_Int2String3(ADC.MeanDivider), 3);
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s, General_Convert_Int2String3(256>>ADC.MeanDivider), 3);
sock_fastwrite(state->s, " [sample]", 9);
Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Mean_Divider_Help(void)
{
char i;
char buf_mean_divider[10];
char buf_sample_amount[10];

sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"div|samples\r\n", 13);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
for(i=0;i<9;i++)
	{
   sprintf(buf_mean_divider,"%3d",i);
   sprintf(buf_sample_amount,"%5d", (N_Max>>i) );

   sock_fastwrite(state->s,buf_mean_divider,strlen(buf_mean_divider));
   sock_fastwrite(state->s,"|", 1);
	sock_fastwrite(state->s,buf_sample_amount,strlen(buf_sample_amount));
   Telnet_NewLine;
	}
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_MeanPreprocess_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;

helper_char=index=index1=index2=0xFF;

   index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"set",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"divider",7)==0)
      	{
         index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
         if (buf[index1+index2+1+1]=='0') Telnet_Mean_Divider_Set(0);
         else
         	{
      		helper_char = (char)atoi(&buf[index1+index2+1+1]);
         	if((helper_char<9) && (helper_char!=0)) Telnet_Mean_Divider_Set(helper_char);
         	else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
         	}
         }
      else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
      }
   else if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"divider",7)==0)
      	{
         Telnet_Mean_Divider_Get();
         }
      else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
      }
   else if(strncmpi(&buf[index+1],"help",4)==0)
   	{
   	Telnet_Mean_Divider_Help();
      }
   else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
}
//**************************MEAN DIVIDER****************************************

//******************************************************************************
//***********************************EPS****************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_EPS_Disable(char flag)
{
if(flag==1) Setting.EPS_Disable=1;
else
   {
   Setting.EPS_Disable=0;
   Dev.EPS=1;
   }
}

_TELNET_HVS_NODEBUG
void Telnet_Status_EPS(void)
{
char helper_char;
char i;
helper_char=System_Flag.EPS_Alarm_No+48;

Telnet_Response;
if(Dev.Manual_EPS==1) sock_fastwrite(state->s,"EPS is manually open!",21);
else if (Setting.EPS_Disable==1) sock_fastwrite(state->s, "EPS is disabled", 15);
else if (Dev.EPS==1)
	{
   sock_fastwrite(state->s, "EPS ON", 6);
   if(System_Flag.EPS_Alarm_No!=0)
   	{
      Telnet_NewLine;
      Telnet_Response;
      sock_fastwrite(state->s, "EPS-config_no: ", 15);
      sock_fastwrite(state->s, &helper_char , 1);
      }
   }
else sock_fastwrite(state->s, "EPS OFF", 7);

Telnet_NewLine;

for(i=0;i<HVS.No_Of_Outputs;i++)
	{
   sock_fastwrite(state->s, "CF:", 3);
   helper_char=i+49;
   sock_fastwrite(state->s, &helper_char, 1);
   sock_fastwrite(state->s, "==", 2);

   if(System_Flag.EPS_Config_Occurence[i]==1) sock_fastwrite(state->s, "ON", 2);
   else sock_fastwrite(state->s, "OFF", 3);
   Telnet_NewLine;
   }

Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_EPS_Handler(char *buf,int len)
{
char index;
index=0xFF;

	index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"open",4)==0) Dev.Manual_EPS=1; //Dev.EPS=0;       //=========================================
//   else if(strncmpi(&buf[index+1],"close",5)==0) Dev.Manual_EPS=0;//Dev.EPS=1;  //===============to finish manual EPS======
   else if(strncmpi(&buf[index+1],"disable",7)==0)
      {
      Telnet_EPS_Disable(1);
      Dev.Manual_EPS=0;
      }
   else if(strncmpi(&buf[index+1],"enable",6)==0)
      {
      Telnet_EPS_Disable(0);
      Dev.Manual_EPS=0;
      }
   else if(strncmpi(&buf[index+1],"status",6)==0) Telnet_Status_EPS();
   else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
}

//******************************************************************************
//***********************************EPS*MASKS**********************************
_TELNET_HVS_NODEBUG
void Telnet_EPS_Mask_Get(void)
{
char i,j;
char char_helper;

Telnet_Response;
sock_fastwrite(state->s, "EPS-config:", 11);
Telnet_NewLine;

for(j=0;j<HVS.No_Of_Outputs;j++)
	{
   sock_fastwrite(state->s, "Config_", 7);
   char_helper=j+49;
   sock_fastwrite(state->s, &char_helper, 1);
   sock_fastwrite(state->s, "/", 1);

	for(i=0;i<HVS.No_Of_Outputs;i++)
		{
   	if(BIT(&Setting.EPS_Output_Mask[j],i)==1)
         {
         char_helper=49;
         sock_fastwrite(state->s, &char_helper, 1);
         }
      else
      	{
         char_helper=48;
         sock_fastwrite(state->s, &char_helper, 1);
         }
      sock_fastwrite(state->s, ":", 1);
      }
   Telnet_NewLine;
   tcp_tick(state->s);
   }
}

_TELNET_HVS_NODEBUG
int Telnet_EPS_Mask_Set(char mask_no,char* buf)
{
char i;
char helper_char;
helper_char=0;

	if((mask_no>HVS.No_Of_Outputs)||(mask_no==0)) return -1;

	for(i=0;i<HVS.No_Of_Outputs;i++)
       if((*(buf+i)!='1') && (*(buf+i)!='0')) return -1;

	for(i=0;i<HVS.No_Of_Outputs;i++)
   	{
   	if(*(buf+i)=='1')
      	{
         set(&helper_char,i);
         }
      else
      	{
         res(&helper_char,i);
         }
      }

Setting.EPS_Output_Mask[mask_no-1]=helper_char;
return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_EPS_Mask_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;
char *helper_pBuf;

	index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      Telnet_EPS_Mask_Get();
      }
   else if(strncmpi(&buf[index+1],"set",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);

      index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      helper_pBuf = &buf[index1+index2+1+1];

      return Telnet_EPS_Mask_Set(helper_char,helper_pBuf);
      }
   else return -1;

return 1;
}

//***********************************EPS*MASKS**********************************
//******************************************************************************

//***********************************EPS****************************************
//******************************************************************************

//******************************************************************************
//***********************************Interlock**********************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_Interlock_Status(void)
{
char i;
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"Ch.|Status\r\n", 12);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
for(i=0;i<8;i++)
	{
   sock_fastwrite(state->s,General_Convert_Int2String3(i+1),3);
   sock_fastwrite(state->s,"|", 1);

   if(((Interlock_Disabled_Channels>>i)&0x01)==1)
   	sock_fastwrite(state->s,"Disabled",8);
   else sock_fastwrite(state->s,"Enabled",7);
   Telnet_NewLine;
	}

/*
if( (Interlock.Red_LED<8) && (Interlock_Disabled_Channels!=0xFF) )
	{
   sock_fastwrite(state->s,Telnet_Text_Line12, 14);
	sock_fastwrite(state->s,"INTERLOCK/ALARM:",16);
	Telnet_NewLine;
	sock_fastwrite(state->s,"Channel:",8);
	sock_fastwrite(state->s,General_Convert_Int2String3(Interlock.Red_LED+1),3);
	Telnet_NewLine;
	}
*/

//it is better to display interlock alarm always
if( (System_Flag.Interlock!=0) && (System_Flag.Interlock<9) )
	{
   sock_fastwrite(state->s,Telnet_Text_Line12, 14);
	sock_fastwrite(state->s,"INTERLOCK/ALARM:",16);
	Telnet_NewLine;
	sock_fastwrite(state->s,"Channel:",8);
	sock_fastwrite(state->s,General_Convert_Int2String3(System_Flag.Interlock),3);
	Telnet_NewLine;
	}

sock_fastwrite(state->s,Telnet_Text_Line12, 14);
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Interlock_Generate(char bool)
{
Interlock_Set_Int_En(bool);
}

_TELNET_HVS_NODEBUG
char Telnet_Interlock_Set(char channel,char bool)
{
if ((channel==0) || (channel>8)) return 0;

if(bool==1) set(&Interlock.Status_Relays,channel-1);
else res(&Interlock.Status_Relays,channel-1);

return 1;
}

_TELNET_HVS_NODEBUG
void Telnet_Interlock_Handler(char *buf, int len)
{
char index,index1;
char helper_char;
index=index1=0xFF;

	index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"status",6)==0)	Telnet_Interlock_Status();
   else if(strncmpi(&buf[index+1],"generate",8)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"on",2)==0) Telnet_Interlock_Generate(1);
      else if (strncmpi(&buf[index1+1],"off",3)==0) Telnet_Interlock_Generate(0);
      else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
      }
   else if(strncmpi(&buf[index+1],"enable",6)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);

      if(Telnet_Interlock_Set(helper_char,0)==0)
      	Telnet_Syntax_Error;
      }
   else if(strncmpi(&buf[index+1],"disable",7)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);

      if(Telnet_Interlock_Set(helper_char,1)==0)
      	Telnet_Syntax_Error;
      }
   else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
}
//***********************************Interlock**********************************


//******************************************************************************
//************************************CONFIG************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_SoftwareVersion_Get(void)
{
Telnet_Response;
sock_fastwrite(state->s, "Software: v", 11);
sock_fastwrite(state->s, SW_Ver, strlen(SW_Ver));
Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_SerialNumber_Get(void)
{
char i;

Telnet_Response;
sock_fastwrite(state->s, "Serial no. HVS", 11);

Telnet_NewLine;
Telnet_Response;
/*
for(i=0;i<SN_MAX;i++)
	{
   sprintf(General.Buffer, "%2x",(int)System_Label.Serial_Number[i]);
	sock_fastwrite(state->s,General.Buffer, 2);
   sock_fastwrite(state->s,".", 2);
   }
*/
sock_fastwrite(state->s,Sys_Return_SN(),4);

Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_MAC_Get(void)
{
Telnet_Response;
sock_fastwrite(state->s,System_Return_MAC(), 17);
Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Config_LoadDefault(void)
{
SFlash_Settings_Load_Default();
}

_TELNET_HVS_NODEBUG
void Telnet_Config_Load(void)
{
SFlash_Settings_Load();
}

_TELNET_HVS_NODEBUG
void Telnet_Config_Save(void)
{
SFlash_Settings_Save();
}

_TELNET_HVS_NODEBUG
void Telnet_Config_NoOfOutputs_Get(void)
{
char helper_char;
helper_char=HVS.No_Of_Outputs+48;

Telnet_Response;
sock_fastwrite(state->s,&helper_char, 1);
Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
char Telnet_Config_NoOfOutputs_Set(char outputs_no)
{
if((outputs_no<2) || (outputs_no>8)) return 0;
else HVS.No_Of_Outputs=outputs_no;

Flags_NoOfOutputs_Adopter();

return 1;
}

_TELNET_HVS_NODEBUG
void Telnet_Config_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;
index=index1=0xFF;

	index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"software_version",16)==0)
      	Telnet_SoftwareVersion_Get();
      else if(strncmpi(&buf[index1+1],"serial_number",13)==0)
      	Telnet_SerialNumber_Get();
      else if(strncmpi(&buf[index1+1],"mac",3)==0)
      	Telnet_MAC_Get();
      else if(strncmpi(&buf[index1+1],"outputs_no",10)==0)
      	Telnet_Config_NoOfOutputs_Get();
      else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
      }
   else if(strncmpi(&buf[index+1],"set",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"outputs",7)==0)
      	{
         index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      	helper_char = (char) atoi(&buf[index1+index2+1+1]);
      	if(Telnet_Config_NoOfOutputs_Set(helper_char)==0)
         	Telnet_Syntax_Error;
         }
      else Telnet_Syntax_Error;
      }
   else if(strncmpi(&buf[index+1],"save",4)==0)	Telnet_Config_Save();
   else if(strncmpi(&buf[index+1],"load_default",12)==0)	Telnet_Config_LoadDefault();
   else if(strncmpi(&buf[index+1],"load",4)==0) Telnet_Config_Load();
   else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);
}
//************************************CONFIG************************************

//******************************************************************************
//************************************Threshold*********************************
//******************************************************************************

//WARNINGS
_TELNET_HVS_NODEBUG
int Telnet_Pth_Warning_Set(char channel,float pressure_threshold)
{
if ((channel==0) || (channel>8)) return -1;
if ((pressure_threshold<0.99E-9) || (pressure_threshold>9.01E-5)) return -1;

Setting.Threshold_Warning[channel-1]=pressure_threshold;

return 1;
}


_TELNET_HVS_NODEBUG
int Telnet_Pth_Warning_Get(char channel)
{
char buf[10];

if ((channel==0) || (channel>8)) return -1;

sprintf(buf,"%.0e",Setting.Threshold_Warning[channel-1]);

Telnet_Response;
sock_fastwrite(state->s,buf, 5);
Telnet_NewLine;
tcp_tick(state->s);
return 1;
}


_TELNET_HVS_NODEBUG
int Telnet_Pth_Warning_Mode_Set(char mode)
{
if (mode>1) return -1;

Setting.Threshold_Warning_Disable_Flag=mode;
}


_TELNET_HVS_NODEBUG
void Telnet_Pth_Warning_Mode_Get(void)
{
char helper_char;
helper_char=Setting.Threshold_Warning_Disable_Flag+48;

Telnet_Response;
sock_fastwrite(state->s,&helper_char, 1);
Telnet_NewLine;
tcp_tick(state->s);
}


_TELNET_HVS_NODEBUG
void Telnet_Pth_Warning_Get_All_Handler(void)
{
char i;
char buf[20];
int len;

sock_fastwrite(state->s,"<PthWAR[mbar]/", 14);

for(i=0;i<HVS.No_Of_Outputs;i++)
	{
   len=sprintf(buf,"%.02e",Setting.Threshold_Warning[i]);
	sock_fastwrite(state->s, buf, len);
   if (i<HVS.No_Of_Outputs-1) sock_fastwrite(state->s, ":", 1);
   else sock_fastwrite(state->s, ">", 1);
   tcp_tick(state->s);
	}

Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
int Telnet_Pth_Warning_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;

float helper_float;
index=index1=0xFF;

	index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"get_all",7)==0)
   	{
      Telnet_Pth_Warning_Get_All_Handler();
      }
   else if(strncmpi(&buf[index+1],"set",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);

      index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      helper_float = atof(&buf[index1+index2+1+1]);

      if(Telnet_Pth_Warning_Set(helper_char,helper_float)<0) return -1;
      }
   else if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);

      if (Telnet_Pth_Warning_Get(helper_char)<0) return -1;
      }
   else if(strncmpi(&buf[index+1],"mode_set",8)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);

      if (Telnet_Pth_Warning_Mode_Set(helper_char)<0) return -1;
      }
   else if(strncmpi(&buf[index+1],"mode_get",8)==0)
   	{
      Telnet_Pth_Warning_Mode_Get();
      }
   else return -1;

return 1;
}

//***************************************EPS************************************
_TELNET_HVS_NODEBUG
int Telnet_Pth_EPS_Set(char channel,float pressure_threshold)
{
if ((channel==0) || (channel>8)) return -1;
if ((pressure_threshold<0.99E-9) || (pressure_threshold>9.01E-5)) return -1;

Setting.Threshold_EPS[channel-1]=pressure_threshold;

return 1;
}


int Telnet_Pth_EPS_Get(char channel)
{
char buf[10];

if ((channel==0) || (channel>8)) return -1;


sprintf(buf,"%.0e",Setting.Threshold_EPS[channel-1]);

Telnet_Response;
sock_fastwrite(state->s,buf, 5);
Telnet_NewLine;
tcp_tick(state->s);
return 1;
}


_TELNET_HVS_NODEBUG
int Telnet_Pth_EPS_Mode_Set(char mode)
{
if (mode>1) return -1;

Setting.EPS_Disable=mode;
}


_TELNET_HVS_NODEBUG
void Telnet_Pth_EPS_Mode_Get(void)
{
char helper_char;
helper_char=Setting.EPS_Disable+48;

Telnet_Response;
sock_fastwrite(state->s,&helper_char, 1);
Telnet_NewLine;
tcp_tick(state->s);
}

void Telnet_Pth_EPS_Get_All_Handler(void)
{
char i;
char buf[20];
int len;

sock_fastwrite(state->s,"<PthEPS[mbar]/", 14);

for(i=0;i<HVS.No_Of_Outputs;i++)
	{
   len=sprintf(buf,"%.02e",Setting.Threshold_EPS[i]);
	sock_fastwrite(state->s, buf, len);
   if (i<HVS.No_Of_Outputs-1) sock_fastwrite(state->s, ":", 1);
   else sock_fastwrite(state->s, ">", 1);
   tcp_tick(state->s);
	}

Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
int Telnet_Pth_EPS_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;

float helper_float;

	index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"get_all",7)==0)
   	{
      Telnet_Pth_EPS_Get_All_Handler();
      }
   else if(strncmpi(&buf[index+1],"set",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);

      index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
      helper_float = atof(&buf[index1+index2+1+1]);

      if(Telnet_Pth_EPS_Set(helper_char,helper_float)<0) return -1;
      }
   else if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);

      if (Telnet_Pth_EPS_Get(helper_char)<0) return -1;
      }
   else if(strncmpi(&buf[index+1],"mode_set",8)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      helper_char = (char) atoi(&buf[index1+1]);

      if (Telnet_Pth_EPS_Mode_Set(helper_char)<0) return -1;
      }
   else if(strncmpi(&buf[index+1],"mode_get",8)==0)
   	{
      Telnet_Pth_EPS_Mode_Get();
      }
   else return -1;

return 1;
}
//************************************Threshold*********************************

//******************************************************************************
//***********************calibration data handler*******************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_CalRawData_Get(char channel)
{
int i;
char buf[10];

sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"Current Calibr.\r\n", 17);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
sock_fastwrite(state->s,"no.|RawData[-]\r\n", 16);
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
for(i=0;i<20;i++)
	{
	sock_fastwrite(state->s,General_Convert_Int2String3(i+1),3);
   sock_fastwrite(state->s,"|", 1);
//   sprintf(buf, "%4d", Sys_SFlash_Ird_Get(channel,i));
	sprintf(buf, "%4d", System.Int_Tab_Cal_Ird[i][channel]);
	sock_fastwrite(state->s,buf,4);
   Telnet_NewLine;
  	tcp_tick(state->s);
   }
sock_fastwrite(state->s,Telnet_Text_Line12, 14);
}

_TELNET_HVS_NODEBUG
void Telnet_CalRawData_All_ChannelStatus(int raw_data_no,char channel)
{
char buf[10];

   sock_fastwrite(state->s,"|", 1);
//   sprintf(buf, "%4d", Sys_SFlash_Ird_Get(channel,raw_data_no));
	sprintf(buf, "%4d", System.Int_Tab_Cal_Ird[raw_data_no][channel]);
	sock_fastwrite(state->s,buf,4);
}

_TELNET_HVS_NODEBUG
void Telnet_CalRawData_All_Get_Line(void)
{
sock_fastwrite(state->s,"--------------------------------------------\r\n", 46);
}

_TELNET_HVS_NODEBUG
void Telnet_CalRawData_All_Get(void)
{
int i,j;
Telnet_CalRawData_All_Get_Line();
sock_fastwrite(state->s,"Current Calibration.\r\n", 22);
Telnet_CalRawData_All_Get_Line();
sock_fastwrite(state->s,"no.| Ch1| Ch2| Ch3| Ch4| Ch5| Ch6| Ch7| Ch8 \r\n", 46);
Telnet_CalRawData_All_Get_Line();
for(i=0;i<20;i++)
	{
	sock_fastwrite(state->s,General_Convert_Int2String3(i+1),3);
	for(j=0;j<8;j++) Telnet_CalRawData_All_ChannelStatus(i,j);
   Telnet_NewLine;
  	tcp_tick(state->s);
   }
Telnet_CalRawData_All_Get_Line();
}

_TELNET_HVS_NODEBUG
int Telnet_Cal_Data_Get_Handler(char *buf,int len)
{
char index;
char helper_char;

   index=General_Detect_Char('=',buf,len);
   helper_char = (char) atoi(&buf[index+1]);
   if((helper_char!=0) && (helper_char<9))
   	{
      Telnet_CalRawData_Get(helper_char-1);
		}
   else if(strncmpi(&buf[index+1],"status",6)==0)
   	{
   	Telnet_CalRawData_All_Get();
      }
   else return -1;

return 1;
}

_TELNET_HVS_NODEBUG
void Telnet_Cal_Data_NewSet(char channel,char no, int new_raw_data)
{
System.Int_Tab_Cal_Ird[no][channel]=new_raw_data;
Calibration_Sys_Flags_Reinit(channel);
//Sys_SFlash_Ird_Set(channel,no,new_raw_data);
}

_TELNET_HVS_NODEBUG
int Telnet_Cal_Data_Set_Handler(char *buf,int len)
{
char index,index1,index2;
char helper_char;
char char_raw_data_no;
int helper_int;

   index=General_Detect_Char('=',buf,len);
   helper_char = (char) atoi(&buf[index+1]);
//   printf("a=%d",helper_char);
   if((helper_char!=0) && (helper_char<9))
   	{
      index1=General_Detect_Char(',',buf,len);
      char_raw_data_no = (char) atoi(&buf[index1+1]);
//      printf("b=%d",char_raw_data_no);
      if((char_raw_data_no>0) && (char_raw_data_no<21))
      	{
         index2=General_Detect_Char(',',&buf[index1+1],(len-index1));
         helper_int = atoi(&buf[index2+index1+1+1]);
//         printf("c=%d",helper_int);
      	if((helper_int>0) && (helper_int<2000))
      		{
            Telnet_Cal_Data_NewSet(helper_char-1,char_raw_data_no-1,helper_int);
            }
            else return -1;
         }
      	else return -1;
		}
   	else return -1;
return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Cal_Data_SaveLoad(char *buf,int len)
{
char index;
char i;
char helper_char;

index=General_Detect_Char('=',buf,len);
helper_char = (char) atoi(&buf[index+1]);

if(strncmpi(&buf[index+1],"save",4)==0)
	{
   for(i=0;i<8;i++) SFlash_Sys_Save_Ird(i);
   }
else if (strncmpi(&buf[index+1],"load",4)==0)
	{
   for(i=0;i<8;i++) SFlash_Sys_Load_Ird(i);
	}
else return -1;
//printf("a=%d",helper_char);
}
//***********************calibration data handler*******************************


//******************************************************************************
//**********************************activity************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
int Telnet_Activity_Request_Handler(char *buf, int len)
{
	sock_fastwrite(state->s,"MAC/", 4);
	sock_fastwrite(state->s,System_Return_MAC(), 18);
   sock_fastwrite(state->s,"|SN/", 4);
   sock_fastwrite(state->s,Sys_Return_SN(), 4);
   Telnet_NewLine;
  	tcp_tick(state->s);
return 1;
}
//**********************************activity************************************


//******************************************************************************
//*******************************Raw Data Handler*******************************
//******************************************************************************
_TELNET_HVS_NODEBUG
int Telnet_RawData_Read(char channel)
{
char helper_char;
char buf[6];

if((channel<1) || (channel>8)) return -1;

helper_char=channel+48;
sprintf(buf,"%04d",System_Return_ActualRawDataMean(channel-1));

sock_fastwrite(state->s,"RD_CH", 5);
sock_fastwrite(state->s,&helper_char, 1);
sock_fastwrite(state->s,":", 1);
sock_fastwrite(state->s,buf, 4);
Telnet_NewLine;
tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
int Telnet_RawData_Handler(char *buf, int len)
{
char index,index1;
char channel_char;

	index=General_Detect_Char('=',buf,len);

   if(strncmpi(&buf[index+1],"read",4)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      channel_char = (char) atoi(&buf[index1+1]);

      if (Telnet_RawData_Read(channel_char)<0) return -1;
      }
   else return -1;

tcp_tick(state->s);
return 1;
}
//*******************************Raw Data Handler*******************************


//******************************************************************************
//*******************************EXIT Handler***********************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_Exit_Handler(void)
{
sock_close(state->s);
}
//*******************************EXIT Handler***********************************


//******************************************************************************
//*******************************Password Handler*******************************
//******************************************************************************
_TELNET_HVS_NODEBUG
int Telnet_Password_Checker(int arg1_int,int arg2_int)
{
if((arg1_int==0) || (arg1_int>9999)) return -1;
if((arg2_int==0) || (arg2_int>9999)) return -1;

if(arg1_int==System_Label.Password)
	{
   System_Label.Password=arg2_int;
   SFlash_Sys_Label_Password_Save();
   }
else return -1;

return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Password_Handler(char *buf, int len)
{
char index,index1;
int arg1_int;
int arg2_int;

   index=General_Detect_Char('=',buf,len);
   arg1_int = atoi(&buf[index+1]);

   index1=General_Detect_Char(',',buf,len);
   arg2_int = atoi(&buf[index1+1]);

   if (Telnet_Password_Checker(arg1_int,arg2_int)>0)
   	{
		sock_fastwrite(state->s,"Password has been changed.",26);
      }
   else return -1;

Telnet_NewLine;
tcp_tick(state->s);
return 1;
}
//*******************************Password Handler*******************************


//******************************************************************************
//****************************alarm*handler*************************************
//******************************************************************************
_TELNET_HVS_NODEBUG
void Telnet_Alarm_EPS_Get(void)
{
char i;
char eps_channel;

   sock_fastwrite(state->s,"<EPS:Conf/",10);
   for(i=0;i<HVS.No_Of_Outputs;i++)
      {
      eps_channel=System_Flag.EPS_Config_Occurence[i]+48;
      sock_fastwrite(state->s,&eps_channel,1);
      if(i<HVS.No_Of_Outputs-1) sock_fastwrite(state->s,":",1);
      }
   sock_fastwrite(state->s,">",1);
   Telnet_NewLine;
   tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Alarm_Warning_Get(void)
{
char i;
char warning_channel;

   sock_fastwrite(state->s,"<WARNING:CH/",12);
   for(i=0;i<HVS.No_Of_Outputs;i++)
      {
      warning_channel=System_Flag.Threshold_Warning[i]+48;
      sock_fastwrite(state->s,&warning_channel,1);
      if(i<HVS.No_Of_Outputs-1) sock_fastwrite(state->s,":",1);
      }
   sock_fastwrite(state->s,">",1);
   Telnet_NewLine;
   tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
void Telnet_Alarm_Interlock_Get(void)
{
char interlocked_channel;

   interlocked_channel=System_Flag.Interlock+48;
   sock_fastwrite(state->s,"<INTERLOCK:CH/",14);
   sock_fastwrite(state->s,&interlocked_channel,1);
   sock_fastwrite(state->s,">",1);
   Telnet_NewLine;
   tcp_tick(state->s);
}

_TELNET_HVS_NODEBUG
int Telnet_Alarm_Status_Get(void)
{
char i;
char buf[100];
int len;

if (System_Flag.EPS>0)
	{
	Telnet_Alarm_EPS_Get();
   }

if (System_Flag.Pth_Warning>0)
	{
   Telnet_Alarm_Warning_Get();
   }

if(System_Flag.Interlock>0)
	{
   Telnet_Alarm_Interlock_Get();
   }

if( (System_Flag.EPS==0) && (System_Flag.Pth_Warning==0) && (System_Flag.Interlock==0) )
	{
   sock_fastwrite(state->s,"<OK/",4);
   len=sprintf(buf,"%.02e:%.02e:%.02e:%.02e:%.02e:%.02e:%.02e:%.02e>",
   System.Pressure[0],System.Pressure[1],System.Pressure[2],System.Pressure[3],
   System.Pressure[4],System.Pressure[5],System.Pressure[6],System.Pressure[7]);

   for(i=0;i<HVS.No_Of_Outputs;i++)
      {
      sock_fastwrite(state->s,buf+(i*9),9);
      }
   Telnet_NewLine;
   tcp_tick(state->s);
   }

if(Setting.Telnet_Alert_Disable>0)
	{
   sock_fastwrite(state->s,"<MESSAGE_EVENTS_DISABLED>",25);
   Telnet_NewLine;
	tcp_tick(state->s);
   }

return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Alarm_Period_Set(long int new_period)
{
if( (new_period<10) || (new_period>65000) ) return -1;

Setting.Telnet_Message_Delay=new_period;

return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Alarm_Period_Get(void)
{
char buf[10];
int len;
len=sprintf(buf,"%u",Setting.Telnet_Message_Delay);

sock_fastwrite(state->s,buf,len);

Telnet_NewLine;
tcp_tick(state->s);

return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Alarm_Disable(char dis)
{
if(dis>0) Setting.Telnet_Alert_Disable=1;
else Setting.Telnet_Alert_Disable=0;

return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Alarm_Handler(char *buf, int len)
{
char index,index1;
char helper_char;
long int alarm_period;

   index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"status",6)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"get",3)==0)
      	{
			return Telnet_Alarm_Status_Get();
         }
      else return -1;
      }
   else if(strncmpi(&buf[index+1],"period_set",10)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      alarm_period=atol(&buf[index1+1]);
      return Telnet_Alarm_Period_Set(alarm_period);
      }
   else if(strncmpi(&buf[index+1],"period_get",10)==0)
   	{
      return Telnet_Alarm_Period_Get();
      }
   else if(strncmpi(&buf[index+1],"eps",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"get",3)==0)
      	{
			Telnet_Alarm_EPS_Get();
         }
      else return -1;
      }
   else if(strncmpi(&buf[index+1],"warning",7)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"get",3)==0)
      	{
			Telnet_Alarm_Warning_Get();
         }
      else return -1;
      }
   else if(strncmpi(&buf[index+1],"interlock",9)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"get",3)==0)
      	{
			Telnet_Alarm_Interlock_Get();
         }
      else return -1;
      }
   else if(strncmpi(&buf[index+1],"alert",5)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      if(strncmpi(&buf[index1+1],"enable",6)==0)
      	{
			return Telnet_Alarm_Disable(0);
         }
      else if(strncmpi(&buf[index1+1],"disable",7)==0)
      	{
         return Telnet_Alarm_Disable(1);
         }
      else return -1;
    //  Setting.Telnet_Alert_Disable
      }
   else return -1;
}
//****************************alarm*handler*************************************

//******************************************************************************
//***********************Telnet_Timer_Handler***********************************
//******************************************************************************
_TELNET_HVS_NODEBUG
int Telnet_Timer_Set(unsigned long timer)
{
if (timer<=0) return -1;

Setting.Telnet_CloseSocket=timer;

tcp_tick(state->s);

return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Timer_Get(void)
{
char buf[20];
int len;

len=sprintf(buf,"Timer=%u",Setting.Telnet_CloseSocket);

Telnet_Response;
sock_fastwrite(state->s,buf,len);

Telnet_NewLine;
tcp_tick(state->s);

return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Timer_Disable(void)
{
Setting.Telnet_CloseSocket=0;

tcp_tick(state->s);

return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Timer_Handler(char *buf, int len)
{
char index,index1;
unsigned long timer;

   index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"set",3)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      timer =atol(&buf[index1+1]);
      return Telnet_Timer_Set(timer);
      }
   else if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      return Telnet_Timer_Get();
      }
   else if(strncmpi(&buf[index+1],"disable",7)==0)
   	{
      return Telnet_Timer_Disable();
      }
   else return -1;

return -1;
}
//***********************Telnet_Timer_Handler***********************************

//***********************reset_counter*handler**********************************
_TELNET_HVS_NODEBUG
int Telnet_Reset_Counter_No1(void)
{
char buf[10];
int len;

len=sprintf(buf,"%d",SFl_Ret_Var1);

Telnet_Response;
sock_fastwrite(state->s,buf,len);

Telnet_NewLine;
tcp_tick(state->s);

return 1;
}

_TELNET_HVS_NODEBUG
int Telnet_Reset_Counter_No2(void)
{
char buf[10];
int len;

len=sprintf(buf,"%d",SFl_Ret_Var2);

Telnet_Response;
sock_fastwrite(state->s,buf,len);

Telnet_NewLine;
tcp_tick(state->s);

return 1;
}


_TELNET_HVS_NODEBUG
int Telnet_Reset_Counter_Handler(char *buf, int len)
{
char index;
int counter_number_int;

   index=General_Detect_Char('=',buf,len);
   counter_number_int = atoi(&buf[index+1]);

   if (counter_number_int==1)
   	{
      return Telnet_Reset_Counter_No1();
      }
   else if (counter_number_int==2)
   	{
      return Telnet_Reset_Counter_No2();
      }
   else return -1;

return 1;
}
//***********************reset_counter*handler**********************************

//**********************hiden system info***************************************
_TELNET_HVS_NODEBUG
int Telnet_System_Info_Handler(void)
{
char buf_sno[6];
char buf[20];

sprintf(buf_sno,"%04d",System_Label.SN);
sprintf(buf,"Compiler Ver: %d.%02x", CC_VER >> 8, CC_VER & 0x0FF);

Telnet_Response;
sock_fastwrite(state->s,"CELLS - ALBA",12);
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"Computing & Control Division",28);
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"Web Page: http://www.cells.es/",30);

Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"Project Design:",15);
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"  O. Matilla",12);
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"  J. Jamroz",11);
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"Approval:",9);
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"  D. Beltran",12);

Telnet_NewLine;
Telnet_Response;

sock_fastwrite(state->s,"Firmware: v",11);
sock_fastwrite(state->s,SW_Ver,strlen(SW_Ver));
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"SNo: HVS",8);
sock_fastwrite(state->s,buf_sno,4);
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"MAC:",4);
sock_fastwrite(state->s,System_Return_MAC(), 17);
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,"Final Release: ",15);
sock_fastwrite(state->s,__DATE__,strlen(__DATE__));
sock_fastwrite(state->s," , ",3);
sock_fastwrite(state->s,__TIME__,strlen(__TIME__));
Telnet_NewLine;
Telnet_Response;
sock_fastwrite(state->s,buf,strlen(buf));

Telnet_NewLine;
tcp_tick(state->s);

return 1;
}
//**********************hiden system info***************************************

//*****************************hidden firmware upload***************************
/*
int Tln_FimUpload(void)
{
HVS_FIM_Update();

Telnet_NewLine;
tcp_tick(state->s);
return 1;
}
*/
//*****************************hidden firmware upload***************************


_TELNET_HVS_NODEBUG
void Telnet_Order_Execute(char *buf, int len)
{
int error;
error=0;

LED_Status(0);
buf[len]=0;

Sys_Arg.TelnetTimer=0;
//***************************************HELP***********************************
if(strncmpi(buf,"help",4)==0)
   {
   Telnet_Help_Handler();
   //printf("DZIALA,DZIALA!!!");
   //sock_fastwrite(state->s, "Help has been pressed\n\r", 23);
	}
//*********************************mode*****************************************
else if(strncmpi(buf,"mode=",5)==0)
	{
	Telnet_Mode_Handler(buf,len);
	}
//***************************acquisition time***********************************
else if(strncmpi(buf,"acquisition_time_get",20)==0)
	{
  	Telnet_Aquisition_Time_Get();
	}
//************************************VOLTAGE***********************************
else if(strncmpi(buf,"voltage=",8)==0)
	{
   Telnet_Voltage_Handler(buf,len);
	}
//************************************CURRENT***********************************
else if(strncmpi(buf,"current=",8)==0)
	{
	Telnet_Current_Handler(buf,len);
	}
//***********************************PRESSURE***********************************
else if(strncmpi(buf,"pressure=",9)==0)
	{
	Telnet_Pressure_Handler(buf,len);
	}
//**********************************ION PUMPS***********************************
else if(strncmpi(buf,"ion_pump=",9)==0)
	{
	Telnet_IonPump_Handler(buf,len);
   }
//**************************MEAN DIVIDER****************************************
else if(strncmpi(buf,"mean_preprocess=",16)==0)
	{
   Telnet_MeanPreprocess_Handler(buf,len);
	}
//**********************************EPS*****************************************
else if(strncmpi(buf,"eps=",4)==0)
	{
	Telnet_EPS_Handler(buf,len);
	}
else if(strncmpi(buf,"eps_mask=",9)==0)
	{
	error=Telnet_EPS_Mask_Handler(buf,len);
	}
//*****************************Interlock****************************************
else if(strncmpi(buf,"interlock=",10)==0)
	{
	Telnet_Interlock_Handler(buf,len);
	}
//************************************CONFIG************************************
else if(strncmpi(buf,"config=",7)==0)
	{
	Telnet_Config_Handler(buf,len);
   }
//****************************channel*enable/disable****************************
else if(strncmpi(buf,"Pth_warning=",12)==0)
	{
	error=Telnet_Pth_Warning_Handler(buf,len);
   }
else if(strncmpi(buf,"Pth_eps=",8)==0)
	{
	error=Telnet_Pth_EPS_Handler(buf,len);
   }
//***********************calibration*data*handler*******************************
else if(strncmpi(buf,"cal_data_get=",12)==0)
	{
	error=Telnet_Cal_Data_Get_Handler(buf,len);
   }
else if(strncmpi(buf,"cal_data_set=",12)==0)
	{
	error=Telnet_Cal_Data_Set_Handler(buf,len);
   }
else if(strncmpi(buf,"cal_data=",9)==0)
	{
   error=Telnet_Cal_Data_SaveLoad(buf,len);
   }
//****************************activity*handler**********************************
else if(strncmpi(buf,"activity",8)==0)
	{
   error=Telnet_Activity_Request_Handler(buf,len);
   }
//*********************raw*data*reader*handler**********************************
else if(strncmpi(buf,"raw_data=",9)==0)
	{
   error=Telnet_RawData_Handler(buf,len);
   }
//*********************close*connection*handler*********************************
else if(strncmpi(buf,"exit",4)==0)
	{
   Telnet_Exit_Handler();
   }
//*********************close*connection*handler*********************************
else if(strncmpi(buf,"password=",9)==0)
	{
   error=Telnet_Password_Handler(buf,len);
   }
//****************************alarm*handler*************************************
else if(strncmpi(buf,"alarm=",6)==0)
	{
   error=Telnet_Alarm_Handler(buf,len);
   }
//***********************telnet*timer*handler***********************************
else if(strncmpi(buf,"telnet_timer=",13)==0)
	{
   error=Telnet_Timer_Handler(buf,len);
   }
//***********************hiden*reset_counter*handler****************************
else if(strncmpi(buf,"reset_counter=",14)==0)
	{
   error=Telnet_Reset_Counter_Handler(buf,len);
   }
//**********************hiden system info***************************************
else if(strncmpi(buf,"system_info",11)==0)
	{
   error=Telnet_System_Info_Handler();
   }
//----------------------------hiden SLOPE info----------------------------------
else if(strncmpi(buf,"slope=",6)==0)
	{
   error=Telnet_Slope_Info_Handler(buf,len);
   }
else if(strncmpi(buf,"pressure_table=",15)==0)
	{
   error=Tln_PTab(buf,len);
   }
//------------------------------------------------------------------------------
/*
else if(strncmpi(buf,"firmware_upload=",16)==0)
	{
   error=Tln_FimUpload();
   }
*/
//------------------------------------------------------------------------------
else sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);

if(error<0) sock_fastwrite(state->s,Telnet_Text_SyntaxError, 16);

tcp_tick(state->s);

LED_Status(1);
}




/*** BeginHeader */
#endif
/*** EndHeader */

