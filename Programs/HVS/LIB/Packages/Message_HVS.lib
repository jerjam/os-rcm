/*** BeginHeader */
#ifndef __MESSAGE_HVS_LIB
#define __MESSAGE_HVS_LIB
/*** EndHeader */

/*** BeginHeader
Message_Box_Handler, Msg_LED_Man_EPS, Message_ModeBox,
Msg_HVS_Bios_Status, Msg_AlbaLogo_Loading,Msg_LED_Problems
*/
#use "SYSTEM_HVS_DEBUG.LIB"
#use "Hidden_LCD_HVS.lib"
cofunc int Message_Box_Handler(void);
//cofunc int Msg_LED_BrokenQLambda(void);
//cofunc void Msg_LED_Warning(void);
//cofunc void Msg_LED_EPS(void);
cofunc void Msg_LED_Man_EPS(void);
void Message_ModeBox(void);
void Msg_HVS_Bios_Status(void);
void Msg_AlbaLogo_Loading(void);
cofunc int Msg_LED_Problems(void);

struct{
char On;
}Message_Box;

/*** EndHeader */

/*
void Message_Alert_Box(char box_no)
{
HLCD_Locate(1,1);
if (box_no==1) 	  HLCD_Write_Text("ÿÿEPSÿOCCURREDÿÿ");
else if (box_no==2) HLCD_Write_Text("ÿÿTHRÿÿWARNINGÿÿ");
else if (box_no==3) HLCD_Write_Text("ÿÿÿINTÿÿALERTÿÿÿ");
else 					  HLCD_Write_Text("ÿÿÿÿÿÿALERTÿÿÿÿÿ");
HLCD_Locate(4,1);
if (box_no==1) 	  HLCD_Write_Text("ÿÿEPSÿOCCURREDÿÿ");
else if (box_no==2) HLCD_Write_Text("ÿÿTHRÿÿWARNINGÿÿ");
else if (box_no==3) HLCD_Write_Text("ÿÿÿINTÿÿALERTÿÿÿ");
else 					  HLCD_Write_Text("ÿÿÿÿÿÿALERTÿÿÿÿÿ");
HLCD_Locate(2,1);
HLCD_Write_Char('ÿ');
HLCD_Locate(3,1);
HLCD_Write_Char('ÿ');
HLCD_Locate(2,16);
HLCD_Write_Char('ÿ');
HLCD_Locate(3,16);
HLCD_Write_Char('ÿ');
}

if (box_no==1) 	  HLCD_Write_Text("**EPS*OCCURRED**");
else if (box_no==2) HLCD_Write_Text("**THR**WARNING**");
else if (box_no==3) HLCD_Write_Text("***INT**ALERT***");
else 					  HLCD_Write_Text("******ALERT*****");
HLCD_Locate(4,1);
if (box_no==1) 	  HLCD_Write_Text("**EPS*OCCURRED**");
else if (box_no==2) HLCD_Write_Text("**THR**WARNING**");
else if (box_no==3) HLCD_Write_Text("***INT**ALERT***");
else 					  HLCD_Write_Text("******ALERT*****");
*/
_SYSTEM_HVS_NODEBUG
void Message_ModeBox(void)
{
HLCD_Display_Clear();
HLCD_Locate(1,1);
HLCD_Write_Text("****************");

HLCD_Locate(4,1);
HLCD_Write_Text("****************");

HLCD_Locate(2,1);
HLCD_Write_Char('*');
HLCD_Locate(3,1);
HLCD_Write_Char('*');
HLCD_Locate(2,16);
HLCD_Write_Char('*');
HLCD_Locate(3,16);
HLCD_Write_Char('*');

HLCD_Locate(2,2);
HLCD_Write_Text(" Secure mode");
HLCD_Locate(3,2);
HLCD_Write_Text("   enabled.");
}

_SYSTEM_HVS_NODEBUG
void Message_Alert_Box(char box_no)
{
HLCD_Locate(1,1);
if (box_no==1) 	  HLCD_Write_Text("***EPS**ALARM***");
else if (box_no==2) HLCD_Write_Text("*P[mbar]WARNING*");
else if (box_no==3) HLCD_Write_Text("**CABLE*UNPLUG**");
else 					  HLCD_Write_Text("******ALERT*****");

HLCD_Locate(4,1);
HLCD_Write_Text("****************");

HLCD_Locate(2,1);
HLCD_Write_Char('*');
HLCD_Locate(3,1);
HLCD_Write_Char('*');
HLCD_Locate(2,16);
HLCD_Write_Char('*');
HLCD_Locate(3,16);
HLCD_Write_Char('*');
}

_SYSTEM_HVS_NODEBUG
void Message_Alert_Interlock_Channel(char row,char channel)
{
HLCD_Locate(row,2);
HLCD_Write_Text("  INTERLOCK   ");
HLCD_Locate(row+1,2);
HLCD_Write_Text("  CHANNEL ");
HLCD_Write_Char(channel+48);  //channel has +1
HLCD_Write_Text("   ");
}

_SYSTEM_HVS_NODEBUG
void Message_Alert_EPS(char row)
{
char i;
HLCD_Locate(row,3);
HLCD_Write_Text("CH~|");
for(i=0;i<HVS.No_Of_Outputs;i++) HLCD_Write_Char(i+49);
HLCD_Write_Char('|');

HLCD_Locate(row+1,6);
HLCD_Write_Char('|');
for(i=0;i<HVS.No_Of_Outputs;i++)
	{
   if(System_Flag.EPS_Config_Occurence[i]>0)
   	{
      HLCD_Write_Char('X');
      }
   else HLCD_Write_Char('O');
	}
HLCD_Write_Char('|');
}

_SYSTEM_HVS_NODEBUG
void Message_Alert_Th_Warning(char row)
{
char i;
HLCD_Locate(row,3);
HLCD_Write_Text("CH~|");
for(i=0;i<HVS.No_Of_Outputs;i++) HLCD_Write_Char(i+49);
HLCD_Write_Char('|');

HLCD_Locate(row+1,6);
HLCD_Write_Char('|');
for(i=0;i<HVS.No_Of_Outputs;i++)
	{
   if(System_Flag.Threshold_Warning[i]>0)
   	{
      HLCD_Write_Char('X');
      }
   else HLCD_Write_Char('O');
	}
HLCD_Write_Char('|');
}

//******************************************************************************
//*********************************CONDITIONS***********************************
/*
int Message_EPS_Condition(void)  //priority 1
{
if((Sys_Fl_EPS_Occurence()>0) && (Setting.EPS_Disable==0)) return 1;
else return 0;
}

int Message_Interlock_Condition(void) //priority 2
{
if((Message_EPS_Condition()==0)||(System_Flag.Interlock>0)) return 1;
else return 0;
}

int Message_Warning_Condition(void) //priority 3
{
if((Message_Interlock_Condition()==0)||((Sys_Fl_Threshold_Warning_Occurence()>0) && (Setting.Threshold_Warning_Disable_Flag==0))) return 1;
else return 0;
}
*/
//*********************************CONDITIONS***********************************
//******************************************************************************
_SYSTEM_HVS_NODEBUG
cofunc int Message_Box_Handler(void)
{
#GLOBAL_INIT{
Message_Box.On=0;
}

if(Sys_Arg.ButtonPressTimer<Sys_MsgBox_Refresh_Time) return 0;

Message_Box.On=0;

if( Ret_Alert_Ocurence==1 )
	{

while( Ret_Alert_Ocurence_NoTimer==1 )
	{

	if ((System_Flag.EPS>0) && (Setting.EPS_Disable==0))
		{
   	Message_Box.On=1;
		HLCD_Display_Clear();
		Message_Alert_Box(1);
		Message_Alert_EPS(2);
      HLCD_Locate(4,17);  //cursor outside the screen
      waitfor( (DelayMs(5000)) || (System_Flag.EPS<=0) );
   	}
   else if ((System_Flag.Pth_Warning>0) && (Setting.Threshold_Warning_Disable_Flag==0))
   	{
   	Message_Box.On=1;
		HLCD_Display_Clear();
		Message_Alert_Box(2);
		Message_Alert_Th_Warning(2);
      HLCD_Locate(4,17);  //cursor outside the screen
      waitfor( (DelayMs(5000)) || (System_Flag.Pth_Warning<=0));
   	}
   else if (System_Flag.Interlock>0)
   	{
   	Message_Box.On=1;
		HLCD_Display_Clear();
		Message_Alert_Box(3);
		Message_Alert_Interlock_Channel(2,System_Flag.Interlock);
      HLCD_Locate(4,17);  //cursor outside the screen
      waitfor( (DelayMs(5000)) || (System_Flag.Interlock<=0));
   	}
   else
   	{
	   Message_Box.On=0;
	   return 0;
      }

    waitfor(Sys_Arg.ButtonPressTimer>Sys_MsgBox_Refresh_Time);
    }

	}
else
	{
   Message_Box.On=0;
   return 0;
   }

Virtual_LCD_Make_Real();
Message_Box.On=0;

return 1;
}

/*
_SYSTEM_HVS_NODEBUG
cofunc void Msg_LED_Warning(void)
{
char i;
char toggler;

if(System_Flag.Pth_Warning==0) abort;

toggler=0;
//while((System_Flag.Pth_Warning>0) && (System_Flag.EPS==0) )
while( (System_Flag.Pth_Warning>0) && (System_Flag.EPS==0) && (Broken_Channel.FlashFlag_Char==0) )
	{
	for(i=0;i<HVS.No_Of_Outputs;i++)
		{
//   	if ((System_Flag.Threshold_Warning[i]>0) && (toggler==0) && (Broken_Channel.FlashFlag[i]!=1) && (System_Flag.EPS_Config_Occurence[i]!=1) ) LED_Orange(i);
//   	else if((System_Flag.Threshold_Warning[i]>0) && (toggler==1) && (Broken_Channel.FlashFlag[i]!=1) && (System_Flag.EPS_Config_Occurence[i]!=1) ) LED_Green(i);
   	if ((System_Flag.Threshold_Warning[i]>0) && (toggler==0) ) LED_Orange(i);
   	else if((System_Flag.Threshold_Warning[i]>0) && (toggler==1) ) LED_Green(i);
   	}
	waitfor(DelayMs(Sys_Msg_LED_BlinkTime));
	toggler=General_Invert_Bool(toggler);
   }

Sys_Arg.Refresh_Counter++;
}
*/

/*
_SYSTEM_HVS_NODEBUG
cofunc void Msg_LED_EPS(void)
{
char i;
char toggler;

if(System_Flag.EPS==0) abort;

toggler=0;
while( (System_Flag.EPS>0) && (Broken_Channel.FlashFlag_Char==0) )
	{
	for(i=0;i<HVS.No_Of_Outputs;i++)
		{
   	if ((System_Flag.EPS_Config_Occurence[i]>0) && (toggler==0) && (Broken_Channel.FlashFlag[i]!=1) ) LED_Red(i);
   	else if((System_Flag.EPS_Config_Occurence[i]>0) && (toggler==1) && (Broken_Channel.FlashFlag[i]!=1) ) LED_Green(i);
   	}
	waitfor(DelayMs(Sys_Msg_LED_BlinkTime));
	toggler=General_Invert_Bool(toggler);
   }

Sys_Arg.Refresh_Counter++;
}
*/

_SYSTEM_HVS_NODEBUG
cofunc void Msg_LED_Man_EPS(void)
{
LED_HVController(1);
waitfor(DelayMs(Sys_Msg_LED_BlinkTime));
LED_HVController(0);
waitfor(DelayMs(Sys_Msg_LED_BlinkTime));
}

_SYSTEM_HVS_NODEBUG
void Msg_HVS_Bios_Status(void)
{
char i;
//Telnet.Mode
LCD_Display_Clear();

LCD_Locate(1,1);
LCD_Write_Text(Menu2_Menu_Strings[20]);

LCD_Locate(2,1);
LCD_Write_Text(Menu2_Menu_Strings[21]);
LCD_Write_Text(SW_Ver);
//if(Telnet.Mode==1) LCD_Write_Text("Commision");
//else LCD_Write_Text("Secure   ");

LCD_Locate(3,1);
LCD_Write_Text(Menu2_Menu_Strings[22]);LCD_Write_Text(Sys_Return_SN());


LCD_Locate(4,1);
LCD_Write_Text(Menu2_Menu_Strings[23]);
LCD_Write_Text(System_Return_ShortMAC());
}

_SYSTEM_HVS_NODEBUG
void Msg_AlbaLogo_Loading(void)
{
	LCD_Display_Clear();
	LCD_Locate(1,1);
	LCD_Write_Text(Menu1_StringAlbaLogo[0]);
   LCD_Locate(2,1);
   LCD_Write_Text(Menu1_StringAlbaLogo[1]);
   LCD_Locate(3,1);
	LCD_Write_Text(Menu1_StringAlbaLogo[2]);
//   LCD_Locate(3,11);LCD_Write_Text(Sys_Return_SN());
   LCD_Locate(4,1);
   LCD_Write_Text("      LOADING...");
}


/*
_SYSTEM_HVS_NODEBUG
cofunc int Msg_LED_BrokenQLambda(void)
{
char i;
char toggler;

if(Broken_Channel.FlashFlag_Char==0) abort;

toggler=0;
while(Broken_Channel.FlashFlag_Char>0)
	{
	for(i=0;i<HVS.No_Of_Outputs;i++)
		{
   	if ((Broken_Channel.FlashFlag[i]>0) && (toggler==0) ) LED_Red(i);
   	else if((Broken_Channel.FlashFlag[i]>0) && (toggler==1) ) LED_Orange(i);
   	}
	waitfor(DelayMs(Sys_Msg_LED_BlinkTime));
	toggler=General_Invert_Bool(toggler);
   }

Sys_Arg.Refresh_Counter++;
}
*/

_SYSTEM_HVS_NODEBUG
cofunc int Msg_LED_Problems(void)
{
char i;
static char toggler[8];

while( (Broken_Channel.FlashFlag_Char>0) || (System_Flag.EPS>0) || (System_Flag.Pth_Warning>0) )
	{
	for(i=0;i<HVS.No_Of_Outputs;i++)
		{
      if(Broken_Channel.FlashFlag[i]>0)
      	{
   		if ( (Broken_Channel.FlashFlag[i]>0) && (toggler[i]==0) ) LED_Red(i);
   		else if( (Broken_Channel.FlashFlag[i]>0) && (toggler[i]==1) ) LED_Orange(i);
         }
      else if(System_Flag.EPS_Config_Occurence[i]>0)
      	{
         if ( (System_Flag.EPS_Config_Occurence[i]>0) && (toggler[i]==0)) LED_Red(i);
	   	else if( (System_Flag.EPS_Config_Occurence[i]>0) && (toggler[i]==1) ) LED_Green(i);
         }
      else if(System_Flag.Threshold_Warning[i]>0)
      	{
	   	if ( (System_Flag.Threshold_Warning[i]>0) && (toggler[i]==0) ) LED_Orange(i);
	   	else if( (System_Flag.Threshold_Warning[i]>0) && (toggler[i]==1) ) LED_Green(i);
         }

      toggler[i]=General_Invert_Bool(toggler[i]);
      }
	waitfor(DelayMs(Sys_Msg_LED_BlinkTime));
   }

Sys_Arg.Refresh_Counter++;
}

/*** BeginHeader */
#endif
/*** EndHeader */

