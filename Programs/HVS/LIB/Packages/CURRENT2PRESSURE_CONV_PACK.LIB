/*** BeginHeader */
#ifndef __CURRENT2PRESSURE_CONVERSION_PACKAGE_LIB
#define __CURRENT2PRESSURE_CONVERSION_PACKAGE_LIB
/*** EndHeader */

/*** BeginHeader
I2P_Init,I2P_Calculate_Pressure,Tln_PTab
*/
#ifdef PACK_I2P_CONV_HVS_DEBUG
#define _PACK_I2P_CONV_HVS_NODEBUG
#else
#define _PACK_I2P_CONV_HVS_NODEBUG nodebug
#endif

//int I2P_Pressure_Store(int id,int arg_no,float val);
int I2P_Init(void);
float I2P_Calculate_Pressure(int id,float Ix);
int Tln_PTab(char *buf, int len);


#define Loc_SFlash_I2P_ION_Page 50
#define Loc_SFlash_I2P_Custom1_Page 51
#define Loc_SFlash_I2P_Custom2_Page 52
//#define Loc_Params_Num Keithley_Current_Loop_Arg
#define Loc_Params_Num 20

const float Iord[Loc_Params_Num]=
{
1E-8, //1
2E-8, //2
5E-8, //3
1E-7, //4
2E-7, //5
5E-7, //6
1E-6, //7
2E-6, //8
5E-6, //9
1E-5, //10
2E-5, //11
5E-5, //12
1E-4, //13
2E-4, //14
5E-4, //15
1E-3, //16
2E-3, //17
5E-3, //18
1E-2, //19
2E-2, //20
};

/*
const float Pord[Loc_Params_Num]=
{
1.40E-11,   //1
2.81E-11,   //2
7.02E-11,   //3
1.40E-10,   //4
2.81E-10,   //5
7.02E-10,   //6
1.40E-09,   //7
2.81E-09,   //8
7.02E-09,   //9
1.40E-08,   //10
2.81E-08,   //11
7.02E-08,   //12
1.40E-07,   //13
2.81E-07,   //14
7.02E-07,   //15
1.40E-06,   //16
2.81E-06,   //17
7.02E-06,   //18
1.40E-05,   //19
1.40E-04,   //20
};
*/

struct IONparams{
int ID;
int Pos;
int Page;
int Model;
};

enum{
i2p_25lps=0,
i2p_75lps,
i2p_150lps,
i2p_300lps,
i2p_500lps,
i2p_custom1,
i2p_custom2,
i2p_custom3,
i2p_custom4,
i2p_custom5,
i2p_custom6,
i2p_custom7,
i2p_custom8,
i2p_stop,
}IONconstants;

const struct IONparams I2Pref[i2p_stop+1] ={
i2p_25lps,		 0,	  Loc_SFlash_I2P_ION_Page,				25,
i2p_75lps,      1,	  Loc_SFlash_I2P_ION_Page,				75,
i2p_150lps,     2,	  Loc_SFlash_I2P_ION_Page,				150,
i2p_300lps,     3,	  Loc_SFlash_I2P_ION_Page,				300,
i2p_500lps,     4,	  Loc_SFlash_I2P_ION_Page,				500,
i2p_custom1,    0,     Loc_SFlash_I2P_Custom1_Page,		1,
i2p_custom2,    1, 	  Loc_SFlash_I2P_Custom1_Page,  		2,
i2p_custom3,    2,	  Loc_SFlash_I2P_Custom1_Page,  		3,
i2p_custom4,    3, 	  Loc_SFlash_I2P_Custom1_Page,  		4,
i2p_custom5,    4,	  Loc_SFlash_I2P_Custom1_Page,  		5,
i2p_custom6,    0, 	  Loc_SFlash_I2P_Custom2_Page,  		6,
i2p_custom7,    1, 	  Loc_SFlash_I2P_Custom2_Page,  		7,
i2p_custom8,    2, 	  Loc_SFlash_I2P_Custom2_Page,  		8,
i2p_stop,  		-1,	  -1,						       			-1,
};

float Pcal[13][Loc_Params_Num];

/*** EndHeader */

_PACK_I2P_CONV_HVS_NODEBUG
int Loc_SFlash_PVarWrite(int pos, float flt, long page)
{
char buf[16];

sf_pageToRAM(page);

sprintf(buf,"%.2e", flt);
buf[8]=0;

sf_writeRAM(buf, (9*pos), 9);
sf_RAMToPage(page);

return 1;
}

_PACK_I2P_CONV_HVS_NODEBUG
float Loc_SFlash_PVarRead(int pos, long page)
{
char buf[16];

sf_pageToRAM(page);
sf_readRAM(buf, (9*pos), 9);

buf[8]=0;

return atof(buf);
}

_PACK_I2P_CONV_HVS_NODEBUG
int I2P_Pressure_Store(int id,int arg_no,float val)
{
if( (id<0) || (id>=i2p_stop) ) return -1;

Loc_SFlash_PVarWrite( (I2Pref[id].Pos*Loc_Params_Num+arg_no),val,I2Pref[id].Page);
return 1;
}


//************************************************FULL STORE IN PROGRESS//************************************************FULL STORE IN PROGRESS
_PACK_I2P_CONV_HVS_NODEBUG
int I2P_Pressure_AllTabs_Store(void)
{
int id,n;
int len;
char buf[1060];
char temp_buf[12];

len=0;
for(id=0;id<=i2p_500lps;id++)
	for(n=0;n<Loc_Params_Num;n++)
   	{
      sprintf(temp_buf,"%.2e", Pcal[id][n]);
      strncpy(&buf[len],temp_buf,9);
      len+=9;
      buf[len-1]=0;
      }

sf_pageToRAM(Loc_SFlash_I2P_ION_Page);
sf_writeRAM(buf,0, 1056);
sf_RAMToPage(Loc_SFlash_I2P_ION_Page);


len=0;
for(id=i2p_custom1;id<=i2p_custom5;id++)
	for(n=0;n<Loc_Params_Num;n++)
   	{
      sprintf(temp_buf,"%.2e", Pcal[id][n]);
      strncpy(&buf[len],temp_buf,9);
      len+=9;
      buf[len-1]=0;
      }

sf_pageToRAM(Loc_SFlash_I2P_Custom1_Page);
sf_writeRAM(buf,0, 1056);
sf_RAMToPage(Loc_SFlash_I2P_Custom1_Page);

len=0;
for(id=i2p_custom6;id<=i2p_custom8;id++)
	for(n=0;n<Loc_Params_Num;n++)
   	{
      sprintf(temp_buf,"%.2e", Pcal[id][n]);
      strncpy(&buf[len],temp_buf,9);
      len+=9;
      buf[len-1]=0;
      }

sf_pageToRAM(Loc_SFlash_I2P_Custom2_Page);
sf_writeRAM(buf,0, 1056);
sf_RAMToPage(Loc_SFlash_I2P_Custom2_Page);
//Loc_SFlash_PVarWrite( (I2Pref[id].Pos*Loc_Params_Num+arg_no),val,I2Pref[id].Page);
return 1;
}
//************************************************FULL STORE IN PROGRESS //************************************************FULL STORE IN PROGRESS


_PACK_I2P_CONV_HVS_NODEBUG
float I2P_Pressure_Load(int id,int arg_no)
{
if( (id<0) || (id>=i2p_stop) ) return -1;

return Loc_SFlash_PVarRead( (I2Pref[id].Pos*Loc_Params_Num+arg_no),I2Pref[id].Page);
}

_PACK_I2P_CONV_HVS_NODEBUG
float I2P_Formula_Dft(float current, float voltage, float unit, float calibration_factor, float pump_size)
{
return ((unit*calibration_factor*(5600/voltage)*0.066*current)/pump_size);
}

/*
_PACK_I2P_CONV_HVS_NODEBUG
float Loc_I2P_Pressure_Store_DftVal(int id,int n)
{
float p_dft;

p_dft=I2P_Formula_Dft(Iord[n],7000,1.33,1,I2Pref[id].Model);

I2P_Pressure_Store(id,n,p_dft );
return p_dft;
}
*/

_PACK_I2P_CONV_HVS_NODEBUG
int I2P_Init(void)
{
int id,n;

sfspi_init();
sf_init();

for(id=0;id<i2p_stop;id++)
   for(n=0;n<Loc_Params_Num;n++)
      Pcal[id][n]=I2P_Pressure_Load(id,n);

for(id=i2p_25lps;id<=i2p_500lps;id++)
   for(n=0;n<Loc_Params_Num;n++)
   	{
//      if(Pcal[id][n]<=0) Pcal[id][n]=Loc_I2P_Pressure_Store_DftVal(id,n);
		if(Pcal[id][n]<=0) Pcal[id][n]=I2P_Formula_Dft(Iord[n],7000,1.33,1,I2Pref[id].Model);
		}

for(id=i2p_500lps+1;id<i2p_stop;id++)
   for(n=0;n<Loc_Params_Num;n++)
   	if(Pcal[id][n]<0) Pcal[id][n]=0;

return 1;
}

 /*
_PACK_I2P_CONV_HVS_NODEBUG
int I2P_Pressure_Store_Default(void)
{
int i,n;

for(i=i2p_25lps;i<i2p_500lps;i++)
	{
   for(n=0;n<Loc_Params_Num;n++)
		I2P_Pressure_Store(i,n,I2P_Formula_Dft(Iord[n],7000,1.33,1,I2Pref[i].Model) );
   }

return 1;
}
*/

_PACK_I2P_CONV_HVS_NODEBUG
float I2P_Calculate_Pressure(int id,float Ix)
{
int n;
float P;

if(id<0) return 0;

for(n=0;n<Loc_Params_Num-1;n++)
	 if(Ix<=Iord[n]) break;

if(n==0)
	{
   P=Pcal[id][0]/Iord[0]*Ix;
	return P;
   }
else
	{
   P=(Pcal[id][n]-Pcal[id][n-1])/(Iord[n]-Iord[n-1])*(Ix-Iord[n-1])+Pcal[id][n-1];
	return P;
	}

return 0;
}
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//TELNET//**********************************************************************
//*************************pressure table***************************************
_PACK_I2P_CONV_HVS_NODEBUG
int Tln_PTab_GetStatus(void)
{
int i;
char text[32];

sock_fastwrite(state->s,"<Pressure Calculation Table>", 28);
Telnet_NewLine;
sock_fastwrite(state->s,"Ch|Pump[l/s]", 12);
Telnet_NewLine;
for(i=0;i<HVS.No_Of_Outputs;i++)
 {
   sprintf(text, "%02d|", i+1);
	sock_fastwrite(state->s,text,3);
   if(I2Pref[System.I2P_Tab_Ch[i]].Model<9)
   	{
      sprintf(text, "Custom:%d", I2Pref[System.I2P_Tab_Ch[i]].Model);
      }
   else sprintf(text, "ION:%03d", I2Pref[System.I2P_Tab_Ch[i]].Model);
	sock_fastwrite(state->s,text,strlen(text));
	Telnet_NewLine;
 }
return 1;
}

_PACK_I2P_CONV_HVS_NODEBUG
int Tln_PTab_SetLink(int ch,int link)
{
if( (ch>8) || (ch<=0) ) return -1;
if( (link>500) || (link <=0) ) return -1;

switch (link)
{
  case 25:
  System.I2P_Tab_Ch[ch-1]=0;
  break;

  case 75:
  System.I2P_Tab_Ch[ch-1]=1;
  break;

  case 150:
  System.I2P_Tab_Ch[ch-1]=2;
  break;

  case 300:
  System.I2P_Tab_Ch[ch-1]=3;
  break;

  case 500:
  System.I2P_Tab_Ch[ch-1]=4;
  break;

  case 1:
  System.I2P_Tab_Ch[ch-1]=5;
  break;

  case 2:
  System.I2P_Tab_Ch[ch-1]=6;
  break;

  case 3:
  System.I2P_Tab_Ch[ch-1]=7;
  break;

  case 4:
  System.I2P_Tab_Ch[ch-1]=8;
  break;

  case 5:
  System.I2P_Tab_Ch[ch-1]=9;
  break;

  case 6:
  System.I2P_Tab_Ch[ch-1]=10;
  break;

  case 7:
  System.I2P_Tab_Ch[ch-1]=11;
  break;

  case 8:
  System.I2P_Tab_Ch[ch-1]=12;
  break;

  default: return -1;
}

SFlash_VarWrite(ID_I2P_Tab_Ch0,System.I2P_Tab_Ch[0]);
SFlash_VarWrite(ID_I2P_Tab_Ch1,System.I2P_Tab_Ch[1]);
SFlash_VarWrite(ID_I2P_Tab_Ch2,System.I2P_Tab_Ch[2]);
SFlash_VarWrite(ID_I2P_Tab_Ch3,System.I2P_Tab_Ch[3]);
SFlash_VarWrite(ID_I2P_Tab_Ch4,System.I2P_Tab_Ch[4]);
SFlash_VarWrite(ID_I2P_Tab_Ch5,System.I2P_Tab_Ch[5]);
SFlash_VarWrite(ID_I2P_Tab_Ch6,System.I2P_Tab_Ch[6]);
SFlash_VarWrite(ID_I2P_Tab_Ch7,System.I2P_Tab_Ch[7]);

return 1;
}

_PACK_I2P_CONV_HVS_NODEBUG
int Tln_PTab_Get(int id)
{
int n;
char text[64];


if(I2Pref[id].Model<9)
	{
	sprintf(text, "TAB Custom:%d", I2Pref[id].Model);
	}
else sprintf(text, "TAB ION:%03d[l/s]", I2Pref[id].Model);

sock_fastwrite( state->s,text,strlen(text) );
//Pcal[id][n]
Telnet_NewLine;

sock_fastwrite(state->s,"Pos| Iref[A]|FLSH[mbar]|RAM[mbar]", 33);
Telnet_NewLine;
for(n=0;n<Loc_Params_Num;n++)
 {
   sprintf(text, "%03d|", n+1);
	sock_fastwrite(state->s,text,strlen(text));

   sprintf(text, "%.02e|", Iord[n] );
	sock_fastwrite(state->s,text,strlen(text));

//   sprintf(text, "%.02e", Pcal[id][n] );
   sprintf(text, "%.02e", I2P_Pressure_Load(id,n) );
	sock_fastwrite(state->s,text,strlen(text));

   sprintf(text, "  |%.02e", Pcal[id][n] );
	sock_fastwrite(state->s,text,strlen(text));

	Telnet_NewLine;
 }
return 1;
}

_PACK_I2P_CONV_HVS_NODEBUG
int Tln_PTab_GetTab(int tab_no)
{
if( (tab_no>500) || (tab_no <=0) ) return -1;

switch (tab_no)
{
  case 25:
  Tln_PTab_Get(0);
  break;

  case 75:
  Tln_PTab_Get(1);
  break;

  case 150:
  Tln_PTab_Get(2);
  break;

  case 300:
  Tln_PTab_Get(3);
  break;

  case 500:
  Tln_PTab_Get(4);
  break;

  case 1:
  Tln_PTab_Get(5);
  break;

  case 2:
  Tln_PTab_Get(6);
  break;

  case 3:
  Tln_PTab_Get(7);
  break;

  case 4:
  Tln_PTab_Get(8);
  break;

  case 5:
  Tln_PTab_Get(9);
  break;

  case 6:
  Tln_PTab_Get(10);
  break;

  case 7:
  Tln_PTab_Get(11);
  break;

  case 8:
  Tln_PTab_Get(12);
  break;

  default: return -1;
}
return 1;
}
//***************************************SET************************************

_PACK_I2P_CONV_HVS_NODEBUG
int Tln_PTab_Set(int id,int n,float val)
{
Pcal[id][n]=val;
//I2P_Pressure_Store(id,n,val);
return 1;
}

int Tln_PTab_SetTab(int tab_no,int el_no,float val)
{
if( (tab_no>500) || (tab_no <=0) ) return -1;
if( (el_no>Loc_Params_Num) || (el_no <=0) ) return -1;

switch (tab_no)
{
  case 25:
  Tln_PTab_Set(0,el_no-1,val);
  break;

  case 75:
  Tln_PTab_Set(1,el_no-1,val);
  break;

  case 150:
  Tln_PTab_Set(2,el_no-1,val);
  break;

  case 300:
  Tln_PTab_Set(3,el_no-1,val);
  break;

  case 500:
  Tln_PTab_Set(4,el_no-1,val);
  break;

  case 1:
  Tln_PTab_Set(5,el_no-1,val);
  break;

  case 2:
  Tln_PTab_Set(6,el_no-1,val);
  break;

  case 3:
  Tln_PTab_Set(7,el_no-1,val);
  break;

  case 4:
  Tln_PTab_Set(8,el_no-1,val);
  break;

  case 5:
  Tln_PTab_Set(9,el_no-1,val);
  break;

  case 6:
  Tln_PTab_Set(10,el_no-1,val);
  break;

  case 7:
  Tln_PTab_Set(11,el_no-1,val);
  break;

  case 8:
  Tln_PTab_Set(12,el_no-1,val);
  break;

  default: return -1;
}

return 1;
}

_PACK_I2P_CONV_HVS_NODEBUG
int Tln_PTab(char *buf, int len)
{
char index,index1,index2;
char helper_char;
int arg1_int;
int arg2_int;
float arg1_float;

   index=General_Detect_Char('=',buf,len);

   if(strncmpi(&buf[index+1],"status",6)==0)
   {
      return Tln_PTab_GetStatus();
   }
   else if(strncmpi(&buf[index+1],"set_link",8)==0)
   {
	   index=General_Detect_Char(',',buf,len);
		arg1_int = atoi(&buf[index+1]);//printf("arg1=%d",arg1_int);
		index1=General_Detect_Char(',',&buf[index+1],len-index);
		arg2_int = atoi(&buf[index+1+index1+1]);//printf("arg2=%d",arg2_int);

      return Tln_PTab_SetLink(arg1_int,arg2_int);
   }
   else if(strncmpi(&buf[index+1],"get",3)==0)
   {
	   index=General_Detect_Char(',',buf,len);
		arg1_int = atoi(&buf[index+1]);//printf("arg1=%d",arg1_int);

      return Tln_PTab_GetTab(arg1_int);
   }
   else if(strncmpi(&buf[index+1],"set",3)==0)
   {
	   index=General_Detect_Char(',',buf,len);
		arg1_int = atoi(&buf[index+1]);//printf("arg1=%d\n",arg1_int);
		index1=General_Detect_Char(',',&buf[index+1],len-index);
		arg2_int = atoi(&buf[index+1+index1+1]);//printf("arg2=%d\n",arg2_int);
      index2=General_Detect_Char(',',&buf[index+1+index1+1],len-index-index1);
		arg1_float = atof(&buf[index+1+index1+1+index2+1]);//printf("arg3=%.02e\n",arg1_float);
	   return Tln_PTab_SetTab(arg1_int,arg2_int,arg1_float);
   }
   else if(strncmpi(&buf[index+1],"store",5)==0)
   {
   	return I2P_Pressure_AllTabs_Store();
   }
   else return -1;

return 1;
}
//*************************pressure table***************************************

/*** BeginHeader */
#endif
/*** EndHeader */