/*** BeginHeader */
#ifndef __SFLASH_STORE_BROKEN_HVS_LIB
#define __SFLASH_STORE_BROKEN_HVS_LIB
/*** EndHeader */

/*** BeginHeader
SFlash_Slope_Inm,it,SFlash_Slope_Save_Handler,SFlash_SlopeFlags_Reset_Save,Slope_RawData_All_Get,Telnet_Slope_Info_Handler,
Telnet_BrkCh_Handler,SFlash_SlopeFl_Handler
*/

//#define SFlash_Ird_Page 2
//#define SFlash_Settings_Page 3
//#define SFlash_Sys_Settings_Page 4
#define SFlash_BrokenThings_Page 6
#define SFlash_BrokenThingsSettings_Page 7
#define SF_BrSlopeMaxN 64


_DEVICE_HVS_NODEBUG void SFlash_Slope_Init(void);
_DEVICE_HVS_NODEBUG int SFlash_Slope_Save_Handler(void);
_DEVICE_HVS_NODEBUG void SFlash_SlopeFlags_Reset_Save(void);
_DEVICE_HVS_NODEBUG void Slope_RawData_All_Get(void);
_DEVICE_HVS_NODEBUG int Telnet_Slope_Info_Handler(char *buf, int len);
//void SFlash_SlopeFl_Res(int flag_no);
int Telnet_BrkCh_Handler(void);
cofunc int SFlash_SlopeFl_Handler(void);
//cofunc int Slope_Error_Msg_Handler(void);
int BrkCh_Timestamp_Save(int ch07);
int BrkCh_Timestamp_Load(int ch07);

struct{
int RawData[9][SF_BrSlopeMaxN];

int FlashFlag[8];
char FlashFlag_Char;

int GotBrokenFl[8];
char GotBrokenFl_Char;

}Broken_Channel;

/*** EndHeader */

/*** Private  */
_DEVICE_HVS_NODEBUG void SFlash_Slope_Load(char channel);
_DEVICE_HVS_NODEBUG void SFlash_SlopeFlags_Load(void);
/*** EndPrivate */

_DEVICE_HVS_NODEBUG
void SFlash_Slope_Init(void)
{
int i;

sfspi_init();
sf_init();

Prt.Trsh=SFlash_VarRead(ID_Prt_Trsh);
if(Prt.Trsh<=0) Prt.Trsh=Prt_Trsh_Dft;
Prt.Delta=SFlash_VarRead(ID_Prt_Delta);
if(Prt.Delta<=0) Prt.Delta=Prt_Delta_Dft;
Prt.T=SFlash_VarRead(ID_Prt_T);
if(Prt.T<=0) Prt.T=Prt_T_Dft;

SFlash_SlopeFlags_Load();

for(i=0;i<8;i++)
	if (Broken_Channel.FlashFlag[i]>1) SFlash_SlopeFlags_Reset_Save();

for(i=0;i<8;i++)
	{
   SFlash_Slope_Load(i);
   }

}

//******************************************************************************
//***************************CURRENT CALIBRATION FLASH STORE********************
_DEVICE_HVS_NODEBUG
void SFlash_Slope_Load(char channel)
{
int i;
int int_raw_data[SF_BrSlopeMaxN];

sf_pageToRAM(SFlash_BrokenThings_Page);
sf_readRAM(SFlash.Read_Buffer, (channel*SF_BrSlopeMaxN*2), SF_BrSlopeMaxN*2);

for(i=0;i<SF_BrSlopeMaxN;i++)
	{
   	int_raw_data[i]=SFlash.Read_Buffer[2*i]*256;
      int_raw_data[i]+=SFlash.Read_Buffer[2*i+1];
   }

for(i=0;i<SF_BrSlopeMaxN;i++)
		Broken_Channel.RawData[channel][i]=int_raw_data[i];
}
/*
_DEVICE_HVS_NODEBUG
void SFlash_Slope_Save(char channel)
{
int i;
char char_H;
char char_L;

sf_pageToRAM(SFlash_BrokenThings_Page);

for (i=0;i<SF_BrSlopeMaxN;i++)
   if (ADC.MeanArray[channel][i]>255)
   	{
      char_H=(char) (ADC.MeanArray[channel][i]/256);
      char_L=(char) (ADC.MeanArray[channel][i]%256);
      SFlash.Write_Buffer[2*i]=char_H;
      SFlash.Write_Buffer[2*i+1]=char_L;
      }
	else
   	{
      SFlash.Write_Buffer[2*i]=0;
      SFlash.Write_Buffer[2*i+1]=(char) ADC.MeanArray[channel][i];
      }

for(i=0; i<SF_BrSlopeMaxN ;i++)
	Broken_Channel.RawData[channel][i]=ADC.MeanArray[channel][i];

sf_writeRAM(SFlash.Write_Buffer, (channel*SF_BrSlopeMaxN*2), SF_BrSlopeMaxN*2);
sf_RAMToPage(SFlash_BrokenThings_Page);

SFlash_Slope_Load(channel);
}
*/
_DEVICE_HVS_NODEBUG
void SFlash_Slope_Save(char channel)
{
int i;
char char_H;
char char_L;

sf_pageToRAM(SFlash_BrokenThings_Page);

for (i=0;i<SF_BrSlopeMaxN;i++)
   if (ADC_Slope.Raw64[channel][i]>255)
   	{
      char_H=(char) (ADC_Slope.Raw64[channel][i]/256);
      char_L=(char) (ADC_Slope.Raw64[channel][i]%256);
      SFlash.Write_Buffer[2*i]=char_H;
      SFlash.Write_Buffer[2*i+1]=char_L;
      }
	else
   	{
      SFlash.Write_Buffer[2*i]=0;
      SFlash.Write_Buffer[2*i+1]=(char) ADC_Slope.Raw64[channel][i];
      }

for(i=0; i<SF_BrSlopeMaxN ;i++)
	Broken_Channel.RawData[channel][i]=ADC_Slope.Raw64[channel][i];

sf_writeRAM(SFlash.Write_Buffer, (channel*SF_BrSlopeMaxN*2), SF_BrSlopeMaxN*2);
sf_RAMToPage(SFlash_BrokenThings_Page);

SFlash_Slope_Load(channel);
}

//***********************CURRENT CALIBRATION FLASH STORE************************
//******************************************************************************



//******************************************************************************
//***************************SFLASH****SYSTEM*SETTINGS**************************

_DEVICE_HVS_NODEBUG
void SFlash_SlopePreprocess_Save(int channel07)
{
char character;
char buf[10];

sf_pageToRAM(SFlash_BrokenThingsSettings_Page);
sf_readRAM(buf,0,8);

if(Broken_Channel.GotBrokenFl[channel07]==1)
   {
   character=1;
   SFlash_Slope_Save(channel07);
   }
else character=0;

Broken_Channel.FlashFlag[channel07]=character;

buf[channel07]=character;
buf[8]=0;

sf_writeRAM(buf, 0, 8);
sf_RAMToPage(SFlash_BrokenThingsSettings_Page);

BrkCh_Timestamp_Save(channel07);
}

_DEVICE_HVS_NODEBUG
void SFlash_SlopeFlags_Load(void)
{
int i;

sf_pageToRAM(SFlash_BrokenThingsSettings_Page);
sf_readRAM(SFlash.Read_Buffer, 0, 8);

Broken_Channel.FlashFlag[0]=SFlash.Read_Buffer[0];
Broken_Channel.FlashFlag[1]=SFlash.Read_Buffer[1];
Broken_Channel.FlashFlag[2]=SFlash.Read_Buffer[2];
Broken_Channel.FlashFlag[3]=SFlash.Read_Buffer[3];
Broken_Channel.FlashFlag[4]=SFlash.Read_Buffer[4];
Broken_Channel.FlashFlag[5]=SFlash.Read_Buffer[5];
Broken_Channel.FlashFlag[6]=SFlash.Read_Buffer[6];
Broken_Channel.FlashFlag[7]=SFlash.Read_Buffer[7];
}

_DEVICE_HVS_NODEBUG
int SFlash_Slope_Save_Handler(void)
{
if( (Broken_Channel.FlashFlag[0]==0) && (Broken_Channel.GotBrokenFl[0]==1) ) SFlash_SlopePreprocess_Save(0);
if( (Broken_Channel.FlashFlag[1]==0) && (Broken_Channel.GotBrokenFl[1]==1) ) SFlash_SlopePreprocess_Save(1);
if( (Broken_Channel.FlashFlag[2]==0) && (Broken_Channel.GotBrokenFl[2]==1) ) SFlash_SlopePreprocess_Save(2);
if( (Broken_Channel.FlashFlag[3]==0) && (Broken_Channel.GotBrokenFl[3]==1) ) SFlash_SlopePreprocess_Save(3);
if( (Broken_Channel.FlashFlag[4]==0) && (Broken_Channel.GotBrokenFl[4]==1) ) SFlash_SlopePreprocess_Save(4);
if( (Broken_Channel.FlashFlag[5]==0) && (Broken_Channel.GotBrokenFl[5]==1) ) SFlash_SlopePreprocess_Save(5);
if( (Broken_Channel.FlashFlag[6]==0) && (Broken_Channel.GotBrokenFl[6]==1) ) SFlash_SlopePreprocess_Save(6);
if( (Broken_Channel.FlashFlag[7]==0) && (Broken_Channel.GotBrokenFl[7]==1) ) SFlash_SlopePreprocess_Save(7);
}

_DEVICE_HVS_NODEBUG
void SFlash_SlopeFlags_Reset_Save(void)
{
int i;

sf_pageToRAM(SFlash_BrokenThingsSettings_Page);

for(i=0;i<8;i++)
   Broken_Channel.FlashFlag[i]=SFlash.Write_Buffer[i]=0;

SFlash.Write_Buffer[8]=0;

sf_writeRAM(SFlash.Write_Buffer, 0, 8);
sf_RAMToPage(SFlash_BrokenThingsSettings_Page);
}


_DEVICE_HVS_NODEBUG
void SFlash_SlopeFl_Res(int flag_no)
{
int i;
sf_pageToRAM(SFlash_BrokenThingsSettings_Page);

for(i=0;i<8;i++)
   SFlash.Write_Buffer[i]=Broken_Channel.FlashFlag[i];

SFlash.Write_Buffer[flag_no]=Broken_Channel.FlashFlag[flag_no]=0;

SFlash.Write_Buffer[8]=0;

sf_writeRAM(SFlash.Write_Buffer, 0, 8);
sf_RAMToPage(SFlash_BrokenThingsSettings_Page);
}

_DEVICE_HVS_NODEBUG
cofunc int SFlash_SlopeFl_Handler(void)
{
int i;

for(i=0;i<8;i++)
	if(Broken_Channel.FlashFlag[i]>0)
   {
	waitfor(DelaySec(20));
	if(ADC.ActualRawDataMean[i]<Prt.Trsh)
   		SFlash_SlopeFl_Res(i);
   }

waitfor(DelaySec(10));

return 1;
}


//***************************SFLASH****SYSTEM*SETTINGS**************************
//******************************************************************************
_DEVICE_HVS_NODEBUG
void Slope_RawData_All_Get(void)
{
char buf[16];
int i,j;
Telnet_CalRawData_All_Get_Line();
sock_fastwrite(state->s,"Slope Raw Data.\r\n", 17);
Telnet_CalRawData_All_Get_Line();
Telnet_NewLine;
sock_fastwrite(state->s,"Flg:", 4);
for(i=0;i<8;i++)
		{
      sprintf(buf, "%4d", Broken_Channel.FlashFlag[i]);
      sock_fastwrite(state->s,buf,4);
      sock_fastwrite(state->s,"|", 1);
		}
Telnet_NewLine;
Telnet_CalRawData_All_Get_Line();
Telnet_NewLine;
sock_fastwrite(state->s,"SYS:", 4);
for(i=0;i<8;i++)
		{
      sprintf(buf, "%4d", Broken_Channel.GotBrokenFl[i]);
      sock_fastwrite(state->s,buf,4);
      sock_fastwrite(state->s,"|", 1);
		}
Telnet_NewLine;
Telnet_CalRawData_All_Get_Line();
sock_fastwrite(state->s,"no.| Ch1| Ch2| Ch3| Ch4| Ch5| Ch6| Ch7| Ch8 \r\n", 46);
Telnet_CalRawData_All_Get_Line();
for(i=0;i<SF_BrSlopeMaxN;i++)
	{
	sock_fastwrite(state->s,General_Convert_Int2String3(i+1),3);
	for(j=0;j<8;j++)
   	{
      sock_fastwrite(state->s,"|", 1);
      sprintf(buf, "%4d", Broken_Channel.RawData[j][i]);
		sock_fastwrite(state->s,buf,4);
   	}
   Telnet_NewLine;
  	tcp_tick(state->s);
   }
Telnet_CalRawData_All_Get_Line();

for(j=0;j<8;j++)
	{
   sprintf(buf,"T%d=%d",j,BrkCh_Timestamp_Load(j));
   sock_fastwrite(state->s,buf,strlen(buf));
   Telnet_NewLine;
   }

}

_DEVICE_HVS_NODEBUG
void SFlash_Slope_Reset_Save(char channel)
{
int i;
char char_H;
char char_L;

sf_pageToRAM(SFlash_BrokenThings_Page);

for (i=0;i<SF_BrSlopeMaxN;i++)
   	{
      SFlash.Write_Buffer[2*i]=0;
      SFlash.Write_Buffer[2*i+1]=0;
      }

for(i=0; i<SF_BrSlopeMaxN ;i++)
	Broken_Channel.RawData[channel][i]=0;

sf_writeRAM(SFlash.Write_Buffer, (channel*SF_BrSlopeMaxN*2), SF_BrSlopeMaxN*2);
sf_RAMToPage(SFlash_BrokenThings_Page);

SFlash_Slope_Load(channel);
}

_DEVICE_HVS_NODEBUG
int Telnet_Slope_Info_Handler(char *buf, int len)
{
int integer;
int j,i;
char text[16];

char index,index1;
unsigned long timer;

   index=General_Detect_Char('=',buf,len);
   if(strncmpi(&buf[index+1],"get",3)==0)
   	{
      Slope_RawData_All_Get();
      return 1;
      }
   else if(strncmpi(&buf[index+1],"reset",5)==0)
   	{
      SFlash_SlopeFlags_Reset_Save();
      return 1;
      }
   else if(strncmpi(&buf[index+1],"clean_flash",11)==0)
   	{
      SFlash_SlopeFlags_Reset_Save();
      for(j=0;j<8;j++)
         {
         SFlash_Slope_Reset_Save(j);
      	}
      return 1;
      }
   else if(strncmpi(&buf[index+1],"status",6)==0)
   	{
		sock_fastwrite(state->s,"BRK/", 4);
		for(i=0;i<HVS.No_Of_Outputs;i++)
			{
     		sprintf(text, "%d", Broken_Channel.FlashFlag[i]);
   	   sock_fastwrite(state->s,text,1);
	      if(i!=HVS.No_Of_Outputs-1)sock_fastwrite(state->s,":", 1);
         else sock_fastwrite(state->s,">", 1);
			}
		Telnet_NewLine;
      return 1;
      }
   else if(strncmpi(&buf[index+1],"params",6)==0)
   	{
		sock_fastwrite(state->s,"Threshold[-]=", 13);
      sprintf(text, "%04d", Prt.Trsh);
      sock_fastwrite(state->s,text, 4);
		Telnet_NewLine;
		sock_fastwrite(state->s,"DELTA[-]=", 9);
      sprintf(text, "%04d", Prt.Delta);
      sock_fastwrite(state->s,text, 4);
		Telnet_NewLine;
		sock_fastwrite(state->s,"TIME[samples]=", 14);
      sprintf(text, "%04d", Prt.T);
      sock_fastwrite(state->s,text, 4);
		Telnet_NewLine;
      return 1;
      }
   else if(strncmpi(&buf[index+1],"threshold",9)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      integer = atoi(&buf[index1+1]);
      if ( (integer>3000) || (integer<=0) ) return -1;
      Prt.Trsh=integer;
      SFlash_VarWrite(ID_Prt_Trsh,Prt.Trsh);
      return 1;
      }
   else if(strncmpi(&buf[index+1],"delta",5)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      integer = atoi(&buf[index1+1]);
      if ( (integer>3000) || (integer<=0) ) return -1;
      Prt.Delta=integer;
      SFlash_VarWrite(ID_Prt_Delta,Prt.Delta);
      return 1;
      }
   else if(strncmpi(&buf[index+1],"time",4)==0)
   	{
      index1=General_Detect_Char(',',buf,len);
      integer = atoi(&buf[index1+1]);
      if ( (integer>64) || (integer<=0) ) return -1;
      Prt.T=integer;
      SFlash_VarWrite(ID_Prt_T,Prt.T);
      return 1;
      }
   else return -1;

return -1;
}

_DEVICE_HVS_NODEBUG
int Telnet_BrkCh_Handler(void)
{
int i;
char text[4];
static char broken_channels_char;

#GLOBAL_INIT{
broken_channels_char=0;
}

if(System_Flag.Telnet==0) return 0;   //costate protector

if(broken_channels_char!=Broken_Channel.FlashFlag_Char)
	{
   if(System_Flag.Telnet>0)
   	{
      broken_channels_char=Broken_Channel.FlashFlag_Char;

		sock_fastwrite(state->s,"<BRK/", 5);
		for(i=0;i<HVS.No_Of_Outputs;i++)
			{
    		sprintf(text, "%01d", Broken_Channel.FlashFlag[i]);
	  	   sock_fastwrite(state->s,text,1);
	      if(i!=HVS.No_Of_Outputs-1)sock_fastwrite(state->s,":", 1);
         else sock_fastwrite(state->s,">", 1);
			}
		Telnet_NewLine;
   	tcp_tick(state->s);
      }
   }

return 1;
}

_DEVICE_HVS_NODEBUG
int BrkCh_Timestamp_Save(int ch07)
{
switch (ch07)
{
  case 0 :
  SFlash_VarWrite(ID_BrCh_Timestamp0,(int)MS_TIMER);
  break;
  case 1 :
  SFlash_VarWrite(ID_BrCh_Timestamp1,(int)MS_TIMER);
  break;
  case 2 :
  SFlash_VarWrite(ID_BrCh_Timestamp2,(int)MS_TIMER);
  break;
  case 3 :
  SFlash_VarWrite(ID_BrCh_Timestamp3,(int)MS_TIMER);
  break;
  case 4 :
  SFlash_VarWrite(ID_BrCh_Timestamp4,(int)MS_TIMER);
  break;
  case 5 :
  SFlash_VarWrite(ID_BrCh_Timestamp5,(int)MS_TIMER);
  break;
  case 6 :
  SFlash_VarWrite(ID_BrCh_Timestamp6,(int)MS_TIMER);
  break;
  case 7 :
  SFlash_VarWrite(ID_BrCh_Timestamp7,(int)MS_TIMER);
  break;
}

return 1;
}

_DEVICE_HVS_NODEBUG
int BrkCh_Timestamp_Load(int ch07)
{
switch (ch07)
{
  case 0 :
  return SFlash_VarRead(ID_BrCh_Timestamp0);
  break;
  case 1 :
  return SFlash_VarRead(ID_BrCh_Timestamp1);
  break;
  case 2 :
  return SFlash_VarRead(ID_BrCh_Timestamp2);
  break;
  case 3 :
  return SFlash_VarRead(ID_BrCh_Timestamp3);
  break;
  case 4 :
  return SFlash_VarRead(ID_BrCh_Timestamp4);
  break;
  case 5 :
  return SFlash_VarRead(ID_BrCh_Timestamp5);
  break;
  case 6 :
  return SFlash_VarRead(ID_BrCh_Timestamp6);
  break;
  case 7 :
  return SFlash_VarRead(ID_BrCh_Timestamp7);
  break;
}

return 0;
}

/**********************WE*ARE*NOT*GONNA*USE*IT**********************************
_DEVICE_HVS_NODEBUG
cofunc int Slope_Error_Msg_Handler(void)
{
int j;

for(j=0;j<8;j++)
	{
	if(Broken_Channel.Flags[j]>0)
		{
		LED_Calibration(1);
      waitfor(DelayMs(500));
		return 1;
		}
   }

LED_Calibration(0);
waitfor(DelayMs(500));
return 0;
}
*/

/*** BeginHeader */
#endif
/*** EndHeader */